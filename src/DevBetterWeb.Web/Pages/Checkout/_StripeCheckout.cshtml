@model DevBetterWeb.Web.ViewModels.SubscriptionTypeViewModel
@{
}

<h1>Purchase @Model.Name Plan</h1>
<h3>$@Model.SubscriptionPrice per @Model.SubscriptionPeriod</h3>
<br />
<!-- Display a payment form -->
<div>
    <style scoped>
        form {
            width: 30vw;
            min-width: 500px;
            align-self: center;
            box-shadow: 0px 0px 0px 0.5px rgba(50, 50, 93, 0.1), 0px 2px 5px 0px rgba(50, 50, 93, 0.1), 0px 1px 1.5px 0px rgba(0, 0, 0, 0.07);
            border-radius: 7px;
            padding: 40px;
        }

        input {
            border-radius: 6px;
            margin-bottom: 6px;
            padding: 12px;
            border: 1px solid rgba(50, 50, 93, 0.1);
            height: 44px;
            font-size: 16px;
            width: 100%;
            background: white;
        }

        .result-message {
            line-height: 22px;
            font-size: 16px;
        }

            .result-message a {
                color: rgb(89, 111, 214);
                font-weight: 600;
                text-decoration: none;
            }

        .hidden {
            display: none;
        }

        #card-error {
            color: rgb(105, 115, 134);
            text-align: left;
            font-size: 13px;
            line-height: 17px;
            margin-top: 12px;
        }

        #card-element {
            border-radius: 4px 4px 0 0;
            padding: 12px;
            border: 1px solid rgba(50, 50, 93, 0.1);
            height: 44px;
            width: 100%;
            background: white;
        }

        #payment-request-button {
            margin-bottom: 32px;
        }
        /* Buttons and links */
        button {
            background: #5469d4;
            color: #ffffff;
            font-family: Arial, sans-serif;
            border-radius: 0 0 4px 4px;
            border: 0;
            padding: 12px 16px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            display: block;
            transition: all 0.2s ease;
            box-shadow: 0px 4px 5.5px 0px rgba(0, 0, 0, 0.07);
            width: 100%;
        }

            button:hover {
                filter: contrast(115%);
            }

            button:disabled {
                opacity: 0.5;
                cursor: default;
            }
        /* spinner/processing state, errors */
        .spinner,
        .spinner:before,
        .spinner:after {
            border-radius: 50%;
        }

        .spinner {
            color: #ffffff;
            font-size: 22px;
            text-indent: -99999px;
            margin: 0px auto;
            position: relative;
            width: 20px;
            height: 20px;
            box-shadow: inset 0 0 0 2px;
            -webkit-transform: translateZ(0);
            -ms-transform: translateZ(0);
            transform: translateZ(0);
        }

            .spinner:before,
            .spinner:after {
                position: absolute;
                content: "";
            }

            .spinner:before {
                width: 10.4px;
                height: 20.4px;
                background: #5469d4;
                border-radius: 20.4px 0 0 20.4px;
                top: -0.2px;
                left: -0.2px;
                -webkit-transform-origin: 10.4px 10.2px;
                transform-origin: 10.4px 10.2px;
                -webkit-animation: loading 2s infinite ease 1.5s;
                animation: loading 2s infinite ease 1.5s;
            }

            .spinner:after {
                width: 10.4px;
                height: 10.2px;
                background: #5469d4;
                border-radius: 0 10.2px 10.2px 0;
                top: -0.1px;
                left: 10.2px;
                -webkit-transform-origin: 0px 10.2px;
                transform-origin: 0px 10.2px;
                -webkit-animation: loading 2s infinite ease;
                animation: loading 2s infinite ease;
            }
    </style>

    <form id="payment-form">
        <label for="card-element" id="cardLabel">Card</label>
        <div id="card-element" class="form-control"><!--Stripe.js injects the Card Element--></div>
        <br />
        <div class="form-row">
            <label for="email" id="emailLabel">Email</label>
        </div>
        <div class="form-row">
            <div style="width:100%;">
                <input name="email" id="email-field" class="form-control" required />
            </div>
        </div>
        <br />
        <button id="submit">
            <div class="spinner hidden" id="spinner"></div>
            <span id="button-text">Subscribe</span>
        </button>
        <p id="card-error" role="alert"></p>
        <p class="result-message hidden">
            Payment successful! Please check your email to complete your registration.
        </p>

    </form>

    <div id="error-message" class="error-message"></div>

    <p>No risk. Cancel anytime.</p>

    <script src="https://js.stripe.com/v3/"></script>


    <script defer>
        var stripe = Stripe("@Model.StripePublishableKey");

        var purchase = {
            "subscriptionpriceid": '@Model.SubscriptionPlanPriceId'
        };

        var PriceId = "@Model.SubscriptionPlanPriceId";

            // Disable the button until we have Stripe set up on the page
        document.querySelector("button").disabled = true;

        var createCustomer = function () {
            var emailJSON = {
                "email": `${document.querySelector('#email-field').value}`
            };
            debugger;

            return fetch('/create-customer', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(emailJSON)
            })
                .then((response) => {
                    return response.json();
                })
                .then((result) => {
                    // result.customer.id is used to map back to the customer object
                    return result;
                });
        }

        var createPaymentIntent = function () {
            fetch("/create-payment-intent", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(purchase)
            })
                .then(function (result) {
                    return result.json();
                })
                .then(function (data) {
                    var elements = stripe.elements();

                    var style = {
                        base: {
                            color: "#32325d",
                            fontFamily: 'Arial, sans-serif',
                            fontSmoothing: "antialiased",
                            fontSize: "16px",
                            "::placeholder": {
                                color: "#32325d"
                            }
                        },
                        invalid: {
                            fontFamily: 'Arial, sans-serif',
                            color: "#fa755a",
                            iconColor: "#fa755a"
                        }
                    };

                    var card = elements.create("card", { style: style });
                    // Stripe injects an iframe into the DOM
                    card.mount("#card-element");

                    card.on("change", function (event) {
                        // Disable the Pay button if there are no card details in the Element
                        document.querySelector("button").disabled = event.empty;
                        document.querySelector("#card-error").textContent = event.error ? event.error.message : "";
                    });

                    var form = document.getElementById("payment-form");
                    form.addEventListener("submit", function (event) {
                        event.preventDefault();
                        // Complete payment when the submit button is clicked
                        payWithCard(stripe, card, data.clientSecret);
                    });

                });


        }

        var createSubscription = function({ customerId, paymentMethodId, priceId }) {
            return (
                fetch('/create-subscription', {
                    method: 'post',
                    headers: {
                        'Content-type': 'application/json',
                    },
                    body: JSON.stringify({
                        "customerId": `${customerId}`,
                        "paymentMethodId": `${paymentMethodId}`,
                        "priceId": `${priceId}`
                    }),
                })
                    .then((response) => {
                        return response.json();
                    })
                    // If the card is declined, display an error to the user.
                    .then((result) => {
                        if (result.error) {
                            // The card had an error when trying to attach it to a customer.
                            throw result;
                        }
                        return result;
                    })
                    // Normalize the result to contain the object returned by Stripe.
                    // Add the additional details we need.
                    .then((result) => {
                        return {
                            paymentMethodId: paymentMethodId,
                            priceId: priceId,
                            subscription: result,
                        };
                    })
                    // Some payment methods require a customer to be on session
                    // to complete the payment process. Check the status of the
                    // payment intent to handle these actions.
                    .then(handlePaymentThatRequiresCustomerAction)
                    // If attaching this card to a Customer object succeeds,
                    // but attempts to charge the customer fail, you
                    // get a requires_payment_method error.
                    .then(handleRequiresPaymentMethod)
                    // No more actions required. Provision your service for the user.
                    .then(onSubscriptionComplete)
                    .catch((error) => {
                        // An error has happened. Display the failure to the user here.
                        // We utilize the HTML element we created.
                        showCardError(error);
                    })
            );        }

        var createPayment = function (card, customerId, priceId, customerEmail) {

            const CustomerId = customerId;

            let PriceId = priceId;

            stripe
                .createPaymentMethod({
                    type: 'card',
                    card: card,
                    billing_details: {
                        email: customerEmail,
                    },
                })
                .then((result) => {
                    if (result.error) {
                        //showError(result.error.message);
                        ////showError(result.error.message);
                    } else {
                        createSubscription({
                            customerId: CustomerId,
                            paymentMethodId: result.paymentMethod.id,
                            priceId: PriceId,
                        });
                        //orderComplete();
                        return result.paymentMethod.id;
                    }
                });
        }

        var handleForm = function () {

            //createPaymentIntent();

            fetch("/create-payment-intent", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(purchase)
            })
                .then(function (result) {
                    return result.json();
                })
                .then(function (data) {
                    var elements = stripe.elements();

                    var style = {
                        base: {
                            color: "#32325d",
                            fontFamily: 'Arial, sans-serif',
                            fontSmoothing: "antialiased",
                            fontSize: "16px",
                            "::placeholder": {
                                color: "#32325d"
                            }
                        },
                        invalid: {
                            fontFamily: 'Arial, sans-serif',
                            color: "#fa755a",
                            iconColor: "#fa755a"
                        }
                    };

                    var card = elements.create("card", { style: style });
                    // Stripe injects an iframe into the DOM
                    card.mount("#card-element");

                    card.on("change", function (event) {
                        // Disable the Pay button if there are no card details in the Element
                        document.querySelector("button").disabled = event.empty;
                        document.querySelector("#card-error").textContent = event.error ? event.error.message : "";
                    });

                    var form = document.getElementById("payment-form");
                    form.addEventListener("submit", function (event) {
                        event.preventDefault();
                        // Complete payment when the submit button is clicked

                        var customerResult = createCustomer();
                        var customer = customerResult.result.customer.id;
                        //var customerId = customerResult.result.customer.id;
                        var paymentMethod = createPayment(card, customer, PriceId, emailJSON.email);

                        // update paymentIntent
                        var paymentIntentUpdateParams = {
                            "customer": `${customer}`,
                            "method": `${paymentMethod}`,
                            "paymentIntentSecret": `${data.id}`
                        };

                        fetch("/update-payment-intent", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(paymentIntentUpdateParams)
                        })

                        payWithCard(stripe, data.clientSecret);
                    });

                });



        }

        handleForm();



            // Calls stripe.confirmCardPayment
            // If the card requires authentication Stripe shows a pop-up modal to
            // prompt the user to enter authentication details without leaving your page.
            var payWithCard = function (stripe, clientSecret) {
                loading(true);
                stripe
                    .confirmCardPayment(clientSecret, {
                    })
                    .then(function (result) {
                        if (result.error) {
                            // Show error to your customer
                            showError(result.error.message);
                        } else {
                            // The payment succeeded!
                            // redirect to success page with email and stripe payment intent id
                            orderComplete(result.paymentIntent.id);
                     }
                    });
            };

            /* ------- UI helpers ------- */
            // Shows a success message when the payment is complete
            var orderComplete = function () {
                loading(false);
                document.querySelector(".result-message").classList.remove("hidden");
                document.querySelector("button").disabled = true;
                document.querySelector("#submit").classList.add("hidden");
                document.querySelector("#card-element").classList.add("hidden");
                document.querySelector("#email").classList.add("hidden");
                document.querySelector("#emailLabel").classList.add("hidden");
                document.querySelector("#cardLabel").classList.add("hidden");
            };
            // Show the customer the error from Stripe if their card fails to charge
            var showError = function (errorMsgText) {
                loading(false);
                var errorMsg = document.querySelector("#card-error");
                errorMsg.textContent = errorMsgText;
                setTimeout(function () {
                    errorMsg.textContent = "";
                }, 4000);
            };
            // Show a spinner on payment submission
            var loading = function (isLoading) {
                if (isLoading) {
                    // Disable the button and show a spinner
                    document.querySelector("button").disabled = true;
                    document.querySelector("#spinner").classList.remove("hidden");
                    document.querySelector("#button-text").classList.add("hidden");
                } else {
                    document.querySelector("button").disabled = false;
                    document.querySelector("#spinner").classList.add("hidden");
                    document.querySelector("#button-text").classList.remove("hidden");
                }
            };
    </script>

</div>

