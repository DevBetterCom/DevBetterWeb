@page
@model DevBetterWeb.Web.Pages.Admin.Videos.CreateModel

@{
	ViewData["Title"] = "Create";
}

<h3>Add Video</h3>

<hr />

<form method="post" enctype="multipart/form-data" onsubmit="return uploadVideo(event)">
	<div class="row mb-3">
		<div class="col-md-6">
			<div class="form-group">
				<label asp-for="VideoModel.Name" class="form-label">Video Name</label>
				<input id="name" asp-for="VideoModel.Name" class="form-control" />
				<span asp-validation-for="VideoModel.Name" class="text-danger"></span>
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label class="form-label">Video Creation Date</label>
				<input id="videoCreationDate" type="date" class="form-control" />
			</div>
		</div>
	</div>
	<div class="row mb-3">
		<div class="col-md-6">
			<div class="form-group">
				<label class="form-label">Video File</label>
				<input id="videoFile" type="file" name="videoFile" class="form-control-file" />
			</div>
		</div>
		<div class="col-md-6">
			<div class="form-group">
				<label class="form-label">MD File</label>
				<input id="mdFile" type="file" name="mdFile" class="form-control-file" />
			</div>
		</div>
	</div>
	<div class="row mb-3">
		<div class="col-12">
			<div class="form-group">
				<label asp-for="VideoModel.Description" class="form-label">Description</label>
				<textarea id="description" asp-for="VideoModel.Description" class="form-control" rows="5" style="max-width: 100%;"></textarea>
				<span asp-validation-for="VideoModel.Description" class="text-danger"></span>
			</div>
		</div>
	</div>
	<div class="row mb-3">
		<div class="col-12">
			<div class="progress">
				<div id="uploadProgressBar" class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
					0%
				</div>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-12">
			<div class="form-group">
				<input type="submit" value="Create" class="btn btn-success" />
			</div>
		</div>
	</div>
</form>



<div>
	<a asp-page="Index">Back to List</a>
</div>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script>
		function arrayBufferToBase64(buffer) {
			let binary = '';
			const bytes = new Uint8Array(buffer);
			for (let i = 0; i < bytes.byteLength; i++) {
				binary += String.fromCharCode(bytes[i]);
			}
			return window.btoa(binary);
		}

		async function uploadVideoFile(responseUpload) {
			const videoFileInput = document.getElementById("videoFile");
			const videoFile = videoFileInput.files[0];
			const mdFileInput = document.getElementById("mdFile");
			const mdFile = mdFileInput.files[0];

			// Initialize progress bar
			const progressBar = document.getElementById("uploadProgressBar");
			progressBar.style.width = "0%";
			progressBar.innerText = "0%";

			const chunkSize = 1024 * 1024;
			const totalChunks = Math.ceil(videoFile.size / chunkSize);
			let uploadedChunks = 0;

			const mdFileReader = new FileReader();
			const mdFileContentPromise = new Promise((resolve) => {
				mdFileReader.onload = (e) => {
					resolve(e.target.result);
				};
				mdFileReader.readAsText(mdFile);
			});

			while (uploadedChunks < totalChunks) {
				const chunkStart = uploadedChunks * chunkSize;
				const chunkEnd = Math.min(chunkStart + chunkSize, videoFile.size);
				const chunk = videoFile.slice(chunkStart, chunkEnd);

				const filePartData = await chunk.arrayBuffer();
				const base64Data = arrayBufferToBase64(filePartData);

				const uploadInfo = {
					...responseUpload,
					FilePartData: base64Data,
					PartSize: chunkEnd - chunkStart,
					UploadOffset: chunkStart,
				};

				if (uploadedChunks === totalChunks - 1) {
					const mdFileContent = await mdFileContentPromise;
					uploadInfo.Description = mdFileContent;
				}

				const uploadVideoEndpoint = "/videos/upload-video";

				await fetch(uploadVideoEndpoint, {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify(uploadInfo),
				});

				uploadedChunks++;

				// Update progress bar
				const progressPercentage = Math.round((uploadedChunks / totalChunks) * 100);
				progressBar.style.width = `${progressPercentage}%`;
				progressBar.innerText = `${progressPercentage}%`;

				if (uploadedChunks === totalChunks) {
					progressBar.style.width = "100%";
					progressBar.innerText = "100%";
				}
			}
		}

		async function uploadMdFile(responseUpload) {
			const mdFileInput = document.getElementById("mdFile");
			const mdFile = mdFileInput.files[0];
			const mdFileReader = new FileReader();

			return new Promise((resolve, reject) => {
				mdFileReader.onload = async (e) => {
					const mdFileContent = e.target.result;

					const uploadMdRequest = {
						VideoId: responseUpload.VideoId,
						Md: mdFileContent,
					};

					const uploadMdEndpoint = "/videos/upload-md";

					try {
						const responseMd = await fetch(uploadMdEndpoint, {
							method: "POST",
							headers: { "Content-Type": "application/json" },
							body: JSON.stringify(uploadMdRequest),
						});

						if (responseMd.status === 401) {
							alert("Unauthorized: You must be an admin.");
							return reject();
						}

						if (!responseMd.ok) {
							throw new Error("MD file upload failed.");
						}

						resolve();
					} catch (error) {
						console.error("MD file upload failed:", error);
						reject(error);
					}
				};

				mdFileReader.readAsText(mdFile);
			});
		}

		async function uploadVideo(event) {
			event.preventDefault();

			const videoFileInput = document.getElementById("videoFile");
			if (!videoFileInput.files.length) {
			  alert("Please select a video file.");
			  return false;
			}

			const mdFileInput = document.getElementById("mdFile");
			if (!mdFileInput.files.length) {
			  alert("Please select an MD file.");
			  return false;
			}

			const videoFile = videoFileInput.files[0];

			const videoNameInput = document.getElementById("name");
			const descriptionInput = document.getElementById("description");
			const videoCreationDateInput = document.getElementById("videoCreationDate");

			const videoName = videoNameInput.value;
			const videoDescription = descriptionInput.value;
			const videoCreationDate = videoCreationDateInput.valueAsDate || new Date(videoFile.lastModified);

			const uploadVideoResumableInfo = {
				FileFullSize: videoFile.size,
				FileName: videoName,
				CreatedTime: videoCreationDate,
			};

			const createVideoUrlEndpoint = "/videos/upload-video-create-url";

			const createButton = document.querySelector("input[type='submit']");
			createButton.disabled = true;

			try {
				const responseUpload = await fetch(createVideoUrlEndpoint, {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify(uploadVideoResumableInfo),
				});

				if (!responseUpload.ok) {
					throw new Error("Failed to create resumable video upload.");
				}

				const responseUploadJson = await responseUpload.json();

				// Upload the video file
				await uploadVideoFile(responseUploadJson);

				alert("Video and MD file uploaded successfully.");
			} catch (error) {
				console.error("Upload failed:", error);
				alert("Video and MD file upload failed.");
			}
			finally {
				createButton.disabled = false;
			}
		}


		$(document).ready(function () {

			if (window.FileReader) {
				$('#videoFile').on('change', function (e) {
					if (e.target.files == undefined || e.target.files.length <= 0) {
						$('#name').val('');
					} else {
						var fileName = e.target.files[0].name;
						$('#name').val(fileName.split('.')[0]);
						var creationDate = new Date(e.target.files[0].lastModified);
						const formattedDate = creationDate.toISOString().slice(0, 10);
						$('#videoCreationDate').val(formattedDate);
					}
				});
				$('#mdFile').on('change', function (e) {
					var file = e.target.files[0];
					var reader = new FileReader();
					reader.onload = function (e) {
						var data = reader.result;
						$('#description').val(data);
					}
					reader.readAsText(file);
				});
			}
		});


	</script>
}
