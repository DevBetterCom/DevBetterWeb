1
00:00:55,080 --> 00:01:07,890
So good morning,

2
00:01:08,280 --> 00:01:24,630
morning. don't think we have any
backlog of questions to discuss

3
00:01:24,630 --> 00:01:25,260
this week.

4
00:01:26,340 --> 00:01:31,410
I have a few. If you need
material to fill in our

5
00:01:33,720 --> 00:01:36,360
chair or we can just work on
coding kata or do any number of

6
00:01:36,360 --> 00:01:37,590
other things not worried.

7
00:01:37,770 --> 00:01:41,040
Well actually that's what I
that's what my question was

8
00:01:41,070 --> 00:01:50,880
about the file logger kata. I'm
almost done with it, but I'm

9
00:01:50,880 --> 00:01:53,370
having a hard time understanding
exactly what I'm supposed to do

10
00:01:53,370 --> 00:02:04,020
with the last point this I think
it's seventh point. So maybe we

11
00:02:04,020 --> 00:02:13,020
can talk about that. Oh, yeah,
we could always ask everyone,

12
00:02:13,020 --> 00:02:16,260
what do you think of my snow
frog name?

13
00:02:16,710 --> 00:02:21,690
Yeah. I haven't heard of that
before. So he said it's taken on

14
00:02:21,720 --> 00:02:24,720
social media. So somebody else
has thought of it. But if it's

15
00:02:24,720 --> 00:02:27,450
not used by anybody in the dev
space, then I think you totally

16
00:02:27,450 --> 00:02:34,440
use that as a as a name for your
dev brand. Right? There's a game

17
00:02:34,440 --> 00:02:37,920
company in Akron, it's something
frog games. tener what it

18
00:02:37,920 --> 00:02:41,580
is, well, frog probably was a

19
00:02:41,580 --> 00:02:46,500
hoppin frog brewery thing on
that, but I thought there was a

20
00:02:46,500 --> 00:02:47,430
game thing.

21
00:02:48,300 --> 00:02:53,880
I remember there was a bullfrog.
game company, they might not be

22
00:02:53,880 --> 00:02:56,820
around anymore, but they they
were pretty popular in the late

23
00:02:56,820 --> 00:02:59,310
90s. I think early 2000s.

24
00:03:10,409 --> 00:03:11,219
Frog gaming.

25
00:03:12,450 --> 00:03:15,930
Okay. Thanks company that makes
social games. Okay.

26
00:03:17,760 --> 00:03:25,050
And then blue frog? Yeah, these
are not far from me. Cool.

27
00:03:25,680 --> 00:03:28,530
Alright, so you're saying number
seven? With this new

28
00:03:28,530 --> 00:03:29,370
requirements?

29
00:03:30,810 --> 00:03:36,000
Yeah, I guess I am. Because the
way I'm reading this, there's

30
00:03:36,000 --> 00:03:39,390
going to be your you're going to
need to have some sort of state

31
00:03:39,420 --> 00:03:44,220
in there, right to know that, to
know that. Like I saw the first

32
00:03:44,220 --> 00:03:50,100
time you'd like to write so you
need to know that the as you're

33
00:03:50,100 --> 00:03:54,840
logging, whether or not you are
the first entry for the weekend

34
00:03:54,870 --> 00:03:57,600
or not, right. So you need some
sort of flag, I guess.

35
00:03:58,139 --> 00:04:00,059
I mean, you should have all the
state you need in the form of

36
00:04:00,059 --> 00:04:00,899
these log files.

37
00:04:01,440 --> 00:04:06,870
Right. Okay. So that was my
other thinking.

38
00:04:07,530 --> 00:04:10,980
So you could look at the files
and or the contents of the files

39
00:04:11,010 --> 00:04:14,850
and determine whether or not
this is the first time or

40
00:04:14,940 --> 00:04:17,340
whatever of whether you need
that text file.

41
00:04:17,580 --> 00:04:22,050
The files don't have, like each
logging entry doesn't have a

42
00:04:22,050 --> 00:04:24,330
date though. With it, right?

43
00:04:25,200 --> 00:04:29,910
I think what I did when I did
this kind of last was I looked

44
00:04:29,910 --> 00:04:34,470
at the files actual metadata for
when it was created. And

45
00:04:35,310 --> 00:04:37,620
Oh, there you go.

46
00:04:38,760 --> 00:04:41,310
The file info type that you can
read. Yeah, yeah.

47
00:04:42,870 --> 00:04:47,460
Yeah, okay. See, that never
occurred to me to solve that.

48
00:04:53,670 --> 00:05:06,420
Hi, Dennis. How are you? You're
on mute. Good evening, creamer.

49
00:05:08,460 --> 00:05:09,180
Good evening.

50
00:05:09,510 --> 00:05:12,360
Does anyone ever call you
creamer as until like a few days

51
00:05:12,360 --> 00:05:14,670
ago when you decided that that
was your your new name? No,

52
00:05:15,000 --> 00:05:18,840
no, no, no, that's been my name
everywhere. When I left JDs when

53
00:05:18,840 --> 00:05:23,100
I left jdsu. Jason my buddy was
there still and he told me that

54
00:05:23,100 --> 00:05:26,550
Angie in the meeting says, What
the heck is kramers? First Name

55
00:05:26,550 --> 00:05:32,910
anyway, or Kramer's last name?
That is his last name. They all

56
00:05:32,910 --> 00:05:36,180
call me Kramer. Like he said,
you know, with the Kramer from

57
00:05:36,180 --> 00:05:39,240
Seinfeld coming in, that's
pretty much sealed the deal

58
00:05:39,540 --> 00:05:44,220
years ago. So the only time you
use first names in my family is

59
00:05:44,220 --> 00:05:45,870
when there's more of us than one
there.

60
00:05:46,560 --> 00:05:51,300
Okay. Yeah, I'm used to using
last names for people from when

61
00:05:51,300 --> 00:05:53,160
I was in the military. And that
was just how you refer to

62
00:05:53,160 --> 00:05:55,860
everybody. Yeah, that was all
under

63
00:05:55,920 --> 00:05:59,490
uniform. Let's say you strike me
as an Air Force guy.

64
00:06:00,180 --> 00:06:03,480
Army. Although, originally I did
try and go Air Force because I

65
00:06:03,480 --> 00:06:04,200
had a scholarship.

66
00:06:06,390 --> 00:06:10,410
He tried with a scholarship. So
how do you not get there, then?

67
00:06:10,740 --> 00:06:13,470
Oh, it's a long story. I'm
actually wearing my my

68
00:06:13,470 --> 00:06:17,490
university of chicago polo shirt
that I got when I visited there.

69
00:06:17,610 --> 00:06:19,920
A few years ago, my daughter,
but I went to University of

70
00:06:19,920 --> 00:06:25,620
Chicago, out of high school, and
I had a former Air Force ROTC

71
00:06:25,620 --> 00:06:29,820
scholarship. Yeah. And that was
great. And life was good.

72
00:06:29,910 --> 00:06:31,920
Because you know, Chicago is
expensive. And my family didn't

73
00:06:31,920 --> 00:06:35,130
have very much money, and they
could never afford it. But when

74
00:06:35,130 --> 00:06:37,950
I got there, I had to fight with
the bursaries office because

75
00:06:37,950 --> 00:06:41,280
they hadn't been paid by the
scholarship people. So I had to

76
00:06:41,280 --> 00:06:44,070
talk to the Air Force and went
back and forth with them in the

77
00:06:44,070 --> 00:06:46,890
midst of also going to ROTC
classes and all my classes and

78
00:06:46,890 --> 00:06:49,590
everything. And I'm 18. And I
don't know anything. And

79
00:06:49,590 --> 00:06:52,530
eventually what it came down to
was that the Air Force was not,

80
00:06:52,530 --> 00:06:55,920
in fact, going to give me my
scholarship because I had knee

81
00:06:55,920 --> 00:06:59,370
surgery as a sophomore in high
school, which they knew about.

82
00:07:00,210 --> 00:07:02,310
But they were using that as a
reason to rescind my

83
00:07:02,310 --> 00:07:04,770
scholarship, after having
awarded it to me, you know,

84
00:07:04,830 --> 00:07:07,050
eight months earlier at high
school, and when they still

85
00:07:07,050 --> 00:07:11,490
ceremony and everything. Oh,
that's nice. Yeah, so so I ended

86
00:07:11,490 --> 00:07:13,560
up having to leave Chicago after
only being there one quarter,

87
00:07:13,560 --> 00:07:17,100
and I had like $7,000 in debt
from that one quarter that the

88
00:07:17,100 --> 00:07:21,120
Air Force didn't pay. And then I
had to transfer and like start

89
00:07:21,120 --> 00:07:24,030
school, basically a year later,
I went to Ohio State, which is a

90
00:07:24,030 --> 00:07:27,390
lot cheaper. Yes, if I had
decided to go straight to Ohio

91
00:07:27,390 --> 00:07:28,920
State out of high school, I
would have had a full ride

92
00:07:28,920 --> 00:07:31,200
scholarship there because I was
a National Merit finalist. And

93
00:07:31,200 --> 00:07:34,110
they give every one of those a
full ride. But only if you go

94
00:07:34,110 --> 00:07:36,120
there at a high school if you're
a transfer student from another

95
00:07:36,120 --> 00:07:39,150
school, sorry, gotten a
financial aid for you. So

96
00:07:39,150 --> 00:07:44,610
thanks. Thanks, Air Force. Yeah,
thanks a lot. And ultimately,

97
00:07:44,610 --> 00:07:47,370
while I was at Ohio State, I was
ended up talking with some

98
00:07:47,370 --> 00:07:50,610
people and getting convinced
that the Ohio National Guard

99
00:07:50,610 --> 00:07:53,160
would be a good place for me. So
I joined the Army National Guard

100
00:07:53,160 --> 00:07:56,640
and eventually went to ROTC not
with a scholarship at Ohio State

101
00:07:56,640 --> 00:07:59,550
and became an officer and in the
army, you know,

102
00:08:01,470 --> 00:08:03,420
thing wasn't a problem for the
army.

103
00:08:04,049 --> 00:08:06,929
No, no, I mean, it was fine. It
was totally it was there wasn't

104
00:08:06,929 --> 00:08:09,059
even any damage to my knee,
right? They just had done

105
00:08:09,059 --> 00:08:11,219
surgery to look around and see
if there was any damage, or

106
00:08:11,219 --> 00:08:15,179
there was arthroscopic. And so
soccer injury when I was a

107
00:08:15,209 --> 00:08:18,119
sophomore, but yeah, my knees
been fine. Forever.

108
00:08:18,870 --> 00:08:21,390
I'll forgive you for that to
playing soccer. That is

109
00:08:23,040 --> 00:08:24,510
football. Yeah,

110
00:08:24,540 --> 00:08:27,810
I was gonna say at least you
didn't call it football. Yeah,

111
00:08:27,990 --> 00:08:28,470
the

112
00:08:29,010 --> 00:08:30,000
American football

113
00:08:30,540 --> 00:08:34,320
in junior high I played but I
yeah, here in Thailand. They

114
00:08:34,320 --> 00:08:37,710
just put in this little football
they call it over here. Field,

115
00:08:37,980 --> 00:08:41,070
but it's small. So it's like
it's like indoor soccer size,

116
00:08:41,130 --> 00:08:46,380
which to me makes the game like
1000 times better game and yes,

117
00:08:46,380 --> 00:08:50,220
that's what I saw. I played
there like in junior high and

118
00:08:50,220 --> 00:08:52,770
played for what did we play for
three years I played I think.

119
00:08:54,030 --> 00:08:56,850
I'm like yeah, and I ran 400
miles. Oh, by the way I scored

120
00:08:56,850 --> 00:09:00,180
wants to know, it's just like,
it's just like, nothing you do

121
00:09:00,180 --> 00:09:02,670
really matters, you know, most
of the time.

122
00:09:03,240 --> 00:09:07,350
Right? Yeah. A big deal when you
score especially that level

123
00:09:07,380 --> 00:09:11,280
right where it's like a real
team instead of a real team. I

124
00:09:11,280 --> 00:09:14,430
play soccer still, I played a
men's league on Saturday

125
00:09:14,430 --> 00:09:17,460
mornings I just played a pickup
game last night actually. And

126
00:09:17,460 --> 00:09:20,610
like a pickup game we had like a
75 minute period and like 10 on

127
00:09:20,640 --> 00:09:24,330
10 on 10 and we probably score
we don't really keeping track of

128
00:09:24,330 --> 00:09:27,000
the score but it was probably
like 20 to 10 or something at

129
00:09:27,000 --> 00:09:29,520
the end I mean, it was much much
more higher rate of scoring

130
00:09:29,880 --> 00:09:33,060
because neither side had like a
dedicated keeper and yeah, it

131
00:09:33,060 --> 00:09:33,750
was a little more

132
00:09:33,780 --> 00:09:37,290
casual. But that was in on a
small field not on a

133
00:09:37,470 --> 00:09:41,340
relatively it was indoor but it
was a large indoor field. Yeah

134
00:09:41,340 --> 00:09:43,410
actually kind of a goofy field
because it's kind of almost a

135
00:09:43,410 --> 00:09:47,280
square which is just weird.
Yeah, it's wider that needs to

136
00:09:47,280 --> 00:09:49,680
be but it's not nearly as long
as it would be for that with

137
00:09:50,460 --> 00:09:53,700
Yeah, so indoor we played in the
gym, like a basketball court,

138
00:09:53,700 --> 00:09:53,940
right?

139
00:09:53,940 --> 00:09:56,730
Yeah, that's really small. goal
at goalie could score

140
00:09:56,730 --> 00:10:00,000
on goalie i mean it's it's
intense then that it makes it

141
00:10:00,000 --> 00:10:03,330
Much more. Much more fun in my
opinion, right than just running

142
00:10:03,330 --> 00:10:06,390
4000 miles and maybe Good luck.
I mean put your budget sweeper

143
00:10:06,390 --> 00:10:10,770
because you're fast like Yo,
thanks you know I really got to

144
00:10:10,770 --> 00:10:15,990
get a score cuz you're not in
front. Yeah, yeah. I call it a

145
00:10:15,990 --> 00:10:17,670
conditioning for basketball is
what it was.

146
00:10:21,510 --> 00:10:24,480
So Dennis, I said hi earlier how
are you?

147
00:10:24,990 --> 00:10:31,680
Hello? Sorry I didn't get my
headphones to work so I'm fine

148
00:10:32,310 --> 00:10:32,880
How are you?

149
00:10:33,210 --> 00:10:38,340
Good welcome this is Phil and
Kramer if you didn't catch that

150
00:10:38,340 --> 00:10:42,600
and I don't know if anyone else
is joining us today. Thanks for

151
00:10:42,600 --> 00:10:46,200
staying up late tonight to join
in Kramer What time is it for

152
00:10:46,200 --> 00:10:46,470
you?

153
00:10:46,919 --> 00:10:50,369
It's eight o'clock for me so
it'll be like midnight for you

154
00:10:50,369 --> 00:10:52,589
isn't Dan is it Dennis? Is that
how we pronounce it? Because I

155
00:10:52,589 --> 00:10:54,929
know you Finn's play with your
names

156
00:10:54,990 --> 00:10:59,190
I'd see it's correct yes,
Dennis. Okay. Okay good.

157
00:10:59,370 --> 00:11:01,500
Yeah, remember not right with
someone's name just tell me

158
00:11:04,290 --> 00:11:05,100
Alright, so

159
00:11:05,400 --> 00:11:07,230
a little bit more than one
o'clock now so

160
00:11:08,669 --> 00:11:10,349
that's right your followers now?

161
00:11:10,799 --> 00:11:14,669
Yeah. New Zealand like to me New
Zealand looks like it's kind of

162
00:11:14,669 --> 00:11:18,269
close to Thailand but like it's
nowhere really near Thailand.

163
00:11:18,990 --> 00:11:21,060
Well, much closer than you are.

164
00:11:24,480 --> 00:11:29,340
Yeah, when when I arrived here,
I think in Australia is close.

165
00:11:29,400 --> 00:11:36,000
It's good. It's here, neighbor.
But still it's three three hours

166
00:11:36,000 --> 00:11:36,810
on the plane.

167
00:11:37,440 --> 00:11:42,780
Yeah. And are you a native
English speaker Dennis?

168
00:11:43,769 --> 00:11:47,849
And now I'm from Finland. Origin
Okay.

169
00:11:48,600 --> 00:11:50,280
Do you speak Finnish and
Swedish?

170
00:11:51,480 --> 00:11:57,930
I speak Swedish a little bit but
I understand a lot but not very

171
00:11:57,930 --> 00:11:58,230
good.

172
00:11:59,670 --> 00:12:03,600
Okay, so I went when I went
there a hola is mostly Swedish

173
00:12:03,600 --> 00:12:06,000
speaking Finns. Right? Okay,

174
00:12:06,000 --> 00:12:13,140
that's probably was on the west
coast of Finland. So I

175
00:12:13,140 --> 00:12:18,090
was so far north though. It was
way up way up there. way up

176
00:12:18,090 --> 00:12:21,990
there. I flew into Helsinki and
then flew another flight way up

177
00:12:21,990 --> 00:12:23,130
to the north Coachella

178
00:12:23,880 --> 00:12:28,230
is the same color. No, this is a
not a North at all.

179
00:12:31,590 --> 00:12:34,200
Well, Santa wasn't there but he
was warming up.

180
00:12:39,750 --> 00:12:43,980
Alright, so do Do you guys have
any opinions about snow frog as

181
00:12:43,980 --> 00:12:48,780
a as a brand like snow frog dev
as a company name fulfill to us?

182
00:12:50,250 --> 00:12:52,230
Anyone want to say why that's a
horrible name?

183
00:12:53,010 --> 00:12:59,910
No frog. It sounds cartoonish.
So perfect in the developer

184
00:12:59,910 --> 00:13:00,210
world.

185
00:13:01,559 --> 00:13:05,219
Sure. Some things I like about
it are that it's only two

186
00:13:05,219 --> 00:13:07,859
syllables. It's easy to spell
enough to tell anybody how to

187
00:13:07,859 --> 00:13:11,759
spell it. And the break between
the words doesn't have any

188
00:13:11,759 --> 00:13:15,089
vowels. Like that's often a
problem. If you have vowels

189
00:13:15,089 --> 00:13:19,559
between your two words, like if,
if it was like, orange alias or

190
00:13:19,559 --> 00:13:21,809
something, right? Like I'm just
making up two words, I know I

191
00:13:21,869 --> 00:13:24,209
have a vowel in the middle,
which is just to be a horrible

192
00:13:24,209 --> 00:13:28,079
name. Like this gets weird
because of that doesn't come

193
00:13:28,079 --> 00:13:30,869
together very well. When you
make that a domain name, right

194
00:13:30,869 --> 00:13:34,559
or an alias, because if it's all
lowercase, it becomes harder to

195
00:13:34,559 --> 00:13:40,109
figure out like orangey but
what's that? right but with snow

196
00:13:40,109 --> 00:13:42,659
frog, you never have that
problem. So you can make this

197
00:13:42,659 --> 00:13:46,049
all lowercase and it would be
just fine. And it works with the

198
00:13:46,049 --> 00:13:49,409
G at the end too. If you make
that snow frog dev or something

199
00:13:49,409 --> 00:13:52,889
like that then you know you're
you're in good shape for for

200
00:13:52,889 --> 00:13:56,579
that so overall I think that's a
good choice for for a name if

201
00:13:56,579 --> 00:14:01,109
you can find the available
aliases or something close to it

202
00:14:03,059 --> 00:14:06,389
and I think we talked last week
about name checker didn't we? Or

203
00:14:06,389 --> 00:14:13,529
did I only post that here but
that's yeah if you go to

204
00:14:13,529 --> 00:14:19,499
something like name checker here
and you put in this then you can

205
00:14:19,499 --> 00:14:22,109
like super quickly see if how
many green checkmarks there are

206
00:14:23,219 --> 00:14:27,989
whether it's a good choice
that's amazing. And then just

207
00:14:28,019 --> 00:14:31,169
you know run off and grab as
many of these as you want.

208
00:14:32,279 --> 00:14:36,929
Before fill those Oh please.
charge me

209
00:14:40,860 --> 00:14:45,570
they're all green. For squares
not green. Oh wait, they were

210
00:14:45,660 --> 00:14:49,320
they were they were out
checking. It looks like Oh,

211
00:14:49,320 --> 00:14:51,570
you've changed our Dallas okay.
If you

212
00:14:51,570 --> 00:14:54,690
just did snow frog all by itself
and like a bunch of stuffs

213
00:14:54,690 --> 00:15:00,930
taken. So it's not very devilish
look good. So So yeah, so I use

214
00:15:00,930 --> 00:15:02,820
this when I'm trying to come up
with a name for something, it

215
00:15:02,820 --> 00:15:04,710
works. It works well. There's
another one I think that

216
00:15:04,710 --> 00:15:09,030
actually has the E in it.
There's there's a few doesn't

217
00:15:09,030 --> 00:15:13,380
really matter which one you use,
they do the same thing. I guess

218
00:15:13,380 --> 00:15:15,630
that's not, there's no there's
another one out there. But this

219
00:15:15,630 --> 00:15:21,480
is the one I usually end up.
Alright, so Phil, any other

220
00:15:21,480 --> 00:15:29,520
questions for me? Or for the
group on on that front? No. All

221
00:15:29,520 --> 00:15:33,390
right. Well, sounds like
generally people are in favor.

222
00:15:35,670 --> 00:15:39,450
Alright, so any other? Any other
questions or topics? Nope.

223
00:15:39,450 --> 00:15:42,450
Nobody posted anything in slack
to queue up for this this week

224
00:15:42,450 --> 00:15:46,590
session. So we can do some hands
on stuff we can talk about

225
00:15:46,890 --> 00:15:50,220
whatever you like, we can
discuss soccer and military

226
00:15:50,220 --> 00:15:52,200
experience. Oh, wait, we did
that.

227
00:15:52,470 --> 00:15:57,000
Well, maybe. Maybe just a follow
up? like where do you I haven't

228
00:15:57,000 --> 00:16:02,070
registered a domain name and
forever. Where's the best way to

229
00:16:02,070 --> 00:16:03,000
do that nowadays,

230
00:16:03,120 --> 00:16:07,230
I I'm personally using Google
domains, pretty much for most

231
00:16:07,230 --> 00:16:11,250
stuff. I'm not a huge fan of
GoDaddy anymore. But I have

232
00:16:11,250 --> 00:16:15,720
domains in three places. My my
three places are GoDaddy,

233
00:16:15,720 --> 00:16:18,090
because I have a bunch of stuff
that is still there that have

234
00:16:18,090 --> 00:16:21,750
moved Google domains, which is
where I mostly put new stuff.

235
00:16:22,650 --> 00:16:28,710
And then Amazon was at route 53,
or Amazon domains. Because I

236
00:16:28,710 --> 00:16:33,150
have some stuff that's set up in
s3, if you just want a static

237
00:16:33,150 --> 00:16:35,550
page, and that's it, and you
don't expect that you're ever

238
00:16:35,550 --> 00:16:40,080
going to put actual code on this
page. Then Amazon static website

239
00:16:40,080 --> 00:16:44,400
stuff is like just amazingly
simple. It's something to Azure

240
00:16:44,400 --> 00:16:49,950
really needs to take a look at.
So if we go to like, Amazon s3

241
00:16:51,060 --> 00:16:57,270
here, and I'll show you what it
would take to get your site. Me

242
00:16:57,300 --> 00:17:10,500
sign in. Alright, so if we do,
website, this is the hardest

243
00:17:10,500 --> 00:17:13,080
part right here is finding out
where this thing is static

244
00:17:13,080 --> 00:17:17,220
website now. How do we get the
web page?

245
00:17:26,099 --> 00:17:31,199
Like blog about it? I think I
might have a blog about I meant

246
00:17:31,199 --> 00:17:35,069
to blog about it. I don't think
I ever did. Come on. This is

247
00:17:35,069 --> 00:17:37,979
gonna be so disappointing when I
can find it. I've used it a few

248
00:17:37,979 --> 00:17:38,579
times.

249
00:17:42,180 --> 00:17:45,180
It's an s3 site, right? Yeah.

250
00:17:45,360 --> 00:17:49,980
I think see build a web app.
It's an app. It's not registered

251
00:17:49,980 --> 00:17:51,900
domain. Really.

252
00:17:54,300 --> 00:17:56,700
I saw something about website
endpoints.

253
00:18:04,650 --> 00:18:11,460
It's just off of s3. This low
risk entrepreneur thing I think

254
00:18:11,460 --> 00:18:14,910
I made as a website, a sample
site, I think was a website.

255
00:18:19,230 --> 00:18:23,340
Shoot. Let's just try to build a
web app. Maybe that's what

256
00:18:23,340 --> 00:18:24,360
that's Elastic Beanstalk?

257
00:18:24,360 --> 00:18:32,790
No, I don't think so either. I
started with AWS about God knows

258
00:18:32,790 --> 00:18:38,160
how many years ago that was. And
then I quit after I met the the

259
00:18:38,160 --> 00:18:45,150
V the VP of Amazon Web Services.
Yeah. He didn't like him. He was

260
00:18:45,150 --> 00:18:48,960
come to, he was at my neighbors.
And he was dating my neighbor,

261
00:18:48,960 --> 00:18:52,170
sister. My problem with that was
this he was married. And I

262
00:18:52,290 --> 00:18:54,660
thought he was a total prick to
be honest with you. And I'm

263
00:18:54,660 --> 00:18:59,100
like, yeah, never didn't care
for the guy that might just I

264
00:18:59,100 --> 00:19:00,600
shouldn't blame the whole
company. Right? whole

265
00:19:00,600 --> 00:19:03,060
organization doesn't one guy.
He's been gone too, right. So

266
00:19:03,060 --> 00:19:05,040
it's like, you know, not
everybody in there supported

267
00:19:05,040 --> 00:19:08,670
that guy either. But it's still
just gambling. Same thing with

268
00:19:10,350 --> 00:19:13,560
same thing with resharper, the
guy from what's the name of the

269
00:19:13,560 --> 00:19:18,120
company behind resharper
JetBrains. JetBrains did a code

270
00:19:18,120 --> 00:19:24,000
mash presentation five years ago
or something like that? And he

271
00:19:24,000 --> 00:19:27,390
was when they were talking about
their C sharp alternative one,

272
00:19:27,630 --> 00:19:30,510
which I can't remember the name.
And he just talked down about

273
00:19:30,510 --> 00:19:32,670
things, so many things. It just
kind of gave me a bad taste in

274
00:19:32,670 --> 00:19:35,790
my mouth. And I'm like, I don't
want resharper I haven't used it

275
00:19:35,790 --> 00:19:40,080
since. Like I said, I shouldn't
do that because it's just one

276
00:19:40,080 --> 00:19:43,350
person. Right? And it's unfair
to categorize the whole company

277
00:19:44,100 --> 00:19:48,030
with one person but it does show
you that. Be careful what you

278
00:19:48,030 --> 00:19:51,030
say because you can affect your
brain. Yeah.

279
00:19:52,920 --> 00:19:56,430
Okay, you know what, this was so
easy when I did this like a year

280
00:19:56,430 --> 00:20:00,600
ago, and I came in find out how
to do it now. Like they're

281
00:20:00,600 --> 00:20:04,800
showing all these things in here
that are hard. But it was

282
00:20:04,800 --> 00:20:07,290
literally a single page thing.
And I was so impressed with it.

283
00:20:07,740 --> 00:20:09,990
And maybe they've gotten rid of
it, because it was too good.

284
00:20:12,270 --> 00:20:15,690
Like, here's how to host your
static website in 10 steps, this

285
00:20:15,690 --> 00:20:20,250
was like one step. So go to s3,
you don't have to do any of this

286
00:20:20,250 --> 00:20:24,750
crap. Like, this is all this was
all done on this page for you,

287
00:20:24,810 --> 00:20:25,710
he didn't have to do any of it.

288
00:20:26,250 --> 00:20:28,200
So we know what your blog post
is going to be.

289
00:20:30,030 --> 00:20:36,480
Find it. Alright, I'm not gonna
waste more time on this, but But

290
00:20:36,480 --> 00:20:39,270
yeah, if you want to host it,
uh, your domain on Amazon,

291
00:20:39,330 --> 00:20:41,460
theoretically, there's a way to
do a static website pretty

292
00:20:41,520 --> 00:20:43,920
easily. then more importantly,
cheaply, right? If you've got a

293
00:20:43,920 --> 00:20:49,320
one page like brochure website,
or even a couple pages, Amazon

294
00:20:49,320 --> 00:20:52,860
will cost you like 10 cents a
month to host the thing there.

295
00:20:52,890 --> 00:20:55,200
And it'll be lightning fast,
because it's just serving static

296
00:20:55,200 --> 00:20:59,160
HTML. Whereas with GoDaddy,
they'll charge you like $5 or

297
00:20:59,160 --> 00:21:01,680
$10 a month to have some
website, they'll have better

298
00:21:01,680 --> 00:21:04,620
tooling for you to build the
thing, though. And Google

299
00:21:04,620 --> 00:21:07,050
domains, they've got website
building stuff somewhere, too,

300
00:21:07,050 --> 00:21:10,470
but it's, it's not as tightly
integrated. GoDaddy stuff is all

301
00:21:10,500 --> 00:21:11,550
is all nice and integrated.

302
00:21:12,510 --> 00:21:16,200
I'm probably going to start with
just the blog. So

303
00:21:18,420 --> 00:21:24,630
if you want just a blog, then
like, I'm using a shoot, what am

304
00:21:24,630 --> 00:21:30,060
I using? siteground? I think
Yeah. siteground. And that that

305
00:21:30,090 --> 00:21:34,110
has worked well for my blog. So
that when I do know where that

306
00:21:34,110 --> 00:21:41,940
is, that's what tools to do.
Yeah, so I'm using this. And

307
00:21:41,940 --> 00:21:47,610
they are, I use WordPress for
mine. And it's super cheap. I've

308
00:21:47,610 --> 00:21:52,530
got this $12 a month plan where
I was paying to WP Engine

309
00:21:53,280 --> 00:21:58,050
substantially more. And this is
100,000 visits a month, which is

310
00:21:58,080 --> 00:21:58,860
plenty for me.

311
00:21:59,759 --> 00:22:02,669
You register your domain name
with them, or you have to do it

312
00:22:02,669 --> 00:22:03,299
somewhere else.

313
00:22:03,900 --> 00:22:07,110
Mine was somewhere else, they
probably would let you do it. I

314
00:22:07,110 --> 00:22:10,020
mean, most of these places you
can, I wouldn't know Yeah,

315
00:22:10,020 --> 00:22:13,560
register a new domain right
here. 16 bucks, you'd probably

316
00:22:13,560 --> 00:22:14,580
get a cheaper somewhere else.

317
00:22:15,120 --> 00:22:18,180
Google domains is for for
the.com is about as cheap as you

318
00:22:18,180 --> 00:22:18,630
can get.

319
00:22:19,890 --> 00:22:22,230
And CloudFlare is another good
one to know oh

320
00:22:22,440 --> 00:22:25,290
CloudFlare out there as well.
Yeah. CloudFlare actually has

321
00:22:25,290 --> 00:22:27,900
though no markup on their
domains, variability

322
00:22:27,900 --> 00:22:30,570
domain registration, I don't
have any mine with them. But I'm

323
00:22:30,570 --> 00:22:34,710
moving more and more of my DNS
to them. Because they offer some

324
00:22:34,710 --> 00:22:37,230
nice services like automatically
giving you SSL without you

325
00:22:37,230 --> 00:22:40,590
having to buy a certificate. So
I've got a bunch of these sites

326
00:22:40,650 --> 00:22:45,060
like dev better itself is, is
run through CloudFlare. So if

327
00:22:45,060 --> 00:22:48,870
you want HTTPS and CloudFlare
makes it cheap.

328
00:22:50,010 --> 00:22:56,940
Notice that GoDaddy, I think
included also the SSL

329
00:22:56,940 --> 00:23:02,580
certificate with their with
their domain names.

330
00:23:04,080 --> 00:23:08,520
Yes, I would do CloudFlare or,
or Google domains I've got I've

331
00:23:08,520 --> 00:23:11,730
got them in, I think I saw one
left and not GoDaddy, but a

332
00:23:11,730 --> 00:23:15,120
GoDaddy reseller. It's like
domains price range, or

333
00:23:15,120 --> 00:23:17,520
something like that. I don't
know. It's a GoDaddy reseller,

334
00:23:17,790 --> 00:23:20,910
and then donate Google domains
and CloudFlare. That's where

335
00:23:20,910 --> 00:23:21,930
I've got all mine now.

336
00:23:22,620 --> 00:23:25,470
Right. And you can just flip
this thing here and turn until

337
00:23:25,470 --> 00:23:30,720
it crypto SSL turned it on, and
then you get SSL running to your

338
00:23:30,720 --> 00:23:33,600
site. Now, it's not fully
protected, because it's gonna go

339
00:23:33,600 --> 00:23:37,020
from CloudFlare to your site in
HTTP, which will not be

340
00:23:37,020 --> 00:23:40,830
encrypted. But for any client
stuff, it'll be encrypted. So

341
00:23:40,830 --> 00:23:43,260
it's only gonna be like cloud to
cloud that it would be not

342
00:23:43,260 --> 00:23:46,620
secure. Okay, if that makes
sense. Just just keep that in

343
00:23:46,620 --> 00:23:48,720
mind. If you ever like doing
something super secure, that you

344
00:23:48,720 --> 00:23:55,890
really want to be secure, and
not just a blog, right. And then

345
00:23:55,890 --> 00:23:59,460
in terms of traffic for for
siteground, when you say they

346
00:23:59,490 --> 00:24:06,060
they will do up to 100,000
monthly visits. This is my my

347
00:24:06,060 --> 00:24:12,030
blog or Dallas, calm and like
in, let's say March. And also

348
00:24:12,030 --> 00:24:13,890
make sure you set up Google
Analytics because it's really

349
00:24:13,890 --> 00:24:19,140
nice. Man, I'm at like 52,000
sessions. So I'm like, only half

350
00:24:19,140 --> 00:24:22,530
of what that thing will let me
get for 12 bucks. Whereas WP

351
00:24:22,530 --> 00:24:27,900
engine was charging like $50 a
month for up to 25,000 sessions

352
00:24:27,900 --> 00:24:31,260
and then like an extra dollar
for every 1000 after that or

353
00:24:31,260 --> 00:24:33,990
something. So they were they
were hitting me with bills for

354
00:24:33,990 --> 00:24:36,870
that plus bills for bandwidth
plus other stuff. So they were

355
00:24:36,870 --> 00:24:39,840
costing me like $70 a month. And
then they wanted to tell me that

356
00:24:39,930 --> 00:24:41,670
I couldn't even stay on that
plane anymore. And I had to

357
00:24:41,670 --> 00:24:44,190
upgrade to one that was like 107
a month. And that's what finally

358
00:24:44,250 --> 00:24:45,420
made me leave.

359
00:24:47,520 --> 00:24:49,530
Because they're great in terms
of customer service, but they're

360
00:24:49,530 --> 00:24:57,120
just too expensive. Do you guys
use Google Analytics, everybody

361
00:24:57,690 --> 00:24:58,350
can use it.

362
00:24:59,190 --> 00:25:02,220
I just put it back. On my thing
to do, because after I upgraded

363
00:25:02,220 --> 00:25:05,280
to the new ghost, I forgot to
set it back up again. So you

364
00:25:05,280 --> 00:25:07,230
said that I'm like, Oh, yeah, I
need to add that back.

365
00:25:07,770 --> 00:25:12,900
Yeah. So my real estate website
is very useful because we get

366
00:25:12,900 --> 00:25:16,920
stats for each property, how
many views and things like that

367
00:25:16,950 --> 00:25:19,500
it's very, very useful for us.

368
00:25:20,640 --> 00:25:24,030
Nice. So this is dev better,
which was just a one page site

369
00:25:24,510 --> 00:25:28,020
for now, that's hosted on Azure.
And so you know, it doesn't get

370
00:25:28,020 --> 00:25:30,870
quite as much traffic as my site
does. I got a typical day it

371
00:25:30,870 --> 00:25:35,130
gets like six visits. Some days,
something big happens, like I

372
00:25:35,130 --> 00:25:36,540
don't know what happened on
March 29.

373
00:25:39,750 --> 00:25:45,330
I thought of joining and I kept
going back as a tating. Reading.

374
00:25:51,720 --> 00:25:56,190
Alright. So what else we can
talk about everything you need

375
00:25:56,190 --> 00:25:59,220
to set up your, your site,
right? So you've got name

376
00:25:59,220 --> 00:26:02,490
checker to find all your places,
you've got something somewhere

377
00:26:02,490 --> 00:26:05,490
on Amazon to set up a website,
you've got this, if you're doing

378
00:26:05,490 --> 00:26:08,010
a blog, which it sounds like you
are, I would recommend

379
00:26:08,010 --> 00:26:10,770
WordPress, but there's, you
know, a few other people doing a

380
00:26:10,770 --> 00:26:12,480
few different things on here.

381
00:26:12,989 --> 00:26:18,449
I was thinking of trying ghost.
Sure. Just because I hate

382
00:26:18,449 --> 00:26:23,699
WordPress. My real estate
website is is built on the

383
00:26:23,729 --> 00:26:28,529
WordPress template and it's
just, I don't know, I'm having a

384
00:26:28,529 --> 00:26:33,119
really hard time with it. But
that might be my problem and not

385
00:26:33,119 --> 00:26:40,799
the WordPress. But ghost is also
I think, based on node. I'm

386
00:26:40,799 --> 00:26:45,749
familiar with that technology
more than PHP. So I was thinking

387
00:26:45,749 --> 00:26:49,559
just for fun too, cuz I've never
Azure I was thinking of actually

388
00:26:53,819 --> 00:26:57,479
using like, because I think they
know I think they have like

389
00:26:57,539 --> 00:27:00,989
already made images and stuff
like that. But I was thinking of

390
00:27:00,989 --> 00:27:07,169
actually spinning it up myself
on on a VM all that up, because

391
00:27:07,169 --> 00:27:09,689
I I've never really done that
before. So I thought it would be

392
00:27:09,689 --> 00:27:11,189
an interesting learning
experience.

393
00:27:11,640 --> 00:27:15,030
Do you have a subscription?
Azure subscription? Or I mean a

394
00:27:15,180 --> 00:27:19,500
MSDN? subscription? Yeah. So you
get 50 bucks a month?

395
00:27:19,680 --> 00:27:21,990
Yeah, that's what I was thinking
of doing that.

396
00:27:22,230 --> 00:27:24,150
I say 50? That's 150 isn't it?

397
00:27:25,080 --> 00:27:31,380
150 for enterprise pros. 50.
Okay. And if they Microsoft

398
00:27:31,380 --> 00:27:33,990
screws up, you can just get more
and more, I've got like four

399
00:27:33,990 --> 00:27:37,530
accounts that they've never shut
off, like 150 bucks a month. Now

400
00:27:37,530 --> 00:27:37,590
the

401
00:27:37,590 --> 00:27:39,600
problem is you can't pull them
so you got to like manage all

402
00:27:39,600 --> 00:27:42,930
your stuff between different
going on.

403
00:27:43,560 --> 00:27:45,960
Yeah, so you had that two way
back in the day, they like never

404
00:27:45,960 --> 00:27:48,960
figure out with your MSDN
subscription from a previous

405
00:27:48,960 --> 00:27:51,600
company. It just like keeps it
keeps going.

406
00:27:51,840 --> 00:27:56,580
Yeah. That actually have actual
subs with them. But

407
00:27:57,960 --> 00:28:00,930
yeah, so I hadn't marathon and
when Brian switched it over for

408
00:28:00,930 --> 00:28:04,110
me, they put it on my other one.
So now I have both. So I've got

409
00:28:04,110 --> 00:28:07,200
four of these things. One that I
actually pay for now. So I get I

410
00:28:07,200 --> 00:28:11,820
get 50 a month out of it. Just
start

411
00:28:11,820 --> 00:28:14,100
your own blog hosting company
and everybody a dev better can

412
00:28:14,100 --> 00:28:17,940
host their blogs with you.
charge them 20 bucks a month.

413
00:28:18,540 --> 00:28:20,790
Yeah, free Azure hosting. It's
Win win.

414
00:28:20,850 --> 00:28:22,320
There you go. Yeah. When when?

415
00:28:24,690 --> 00:28:26,310
You're using ghost Kramer?

416
00:28:26,820 --> 00:28:30,630
Yeah. Yeah, I use ghosts. I use
the default template. What's

417
00:28:30,630 --> 00:28:30,750
your

418
00:28:30,750 --> 00:28:31,230
hosting?

419
00:28:34,140 --> 00:28:37,350
I don't even know because like I
said, it's, um, it's on Azure. I

420
00:28:37,350 --> 00:28:38,370
used it as your template.

421
00:28:38,729 --> 00:28:39,629
Okay, so it's on Azure.

422
00:28:40,800 --> 00:28:43,080
Yeah, it's a B one, I think I
think is what it is.

423
00:28:43,500 --> 00:28:46,380
Okay. So if you want to know how
to set it up on Azure, just talk

424
00:28:46,380 --> 00:28:46,800
to Kramer.

425
00:28:50,190 --> 00:28:55,230
Yeah. So I went straight simple.
So now I need to go back in and

426
00:28:55,260 --> 00:28:57,780
add Google Analytics back.

427
00:28:58,950 --> 00:28:59,880
Yeah, you should do that.

428
00:29:01,170 --> 00:29:02,940
I had it before but when I
listen,

429
00:29:02,970 --> 00:29:05,520
Pierre, do you guys have blogs
anywhere currently?

430
00:29:07,440 --> 00:29:12,090
I don't know. Yeah, plan. I'm
gonna. I looked up Gatsby. I'm

431
00:29:12,090 --> 00:29:15,330
going to use that to build a
blog this this weekend.

432
00:29:15,840 --> 00:29:18,600
Nice. Gatsby is nice if you're a
react guy.

433
00:29:19,980 --> 00:29:23,370
Yeah, I was looking for Angular
option. I didn't see one I like

434
00:29:23,370 --> 00:29:25,410
Gatsby looked really
interesting.

435
00:29:28,230 --> 00:29:31,860
Well, Angular is not really made
for I would say it's not made

436
00:29:31,860 --> 00:29:35,610
for static sites, whereas Gatsby
is definitely driven towards

437
00:29:35,640 --> 00:29:41,040
towards that so so yeah, Gatsby
react. People are doing Gatsby

438
00:29:41,040 --> 00:29:44,370
somebody else's in the group has
got a Gatsby blog, too. I don't

439
00:29:44,370 --> 00:29:45,540
remember who do you see.

440
00:29:46,020 --> 00:29:48,840
Now but I bet you're right. I do
remember that someone else did.

441
00:29:50,010 --> 00:29:51,030
Yeah, somebody has one.

442
00:29:52,410 --> 00:29:55,890
Yeah, I checked it out and
really liked it and going back

443
00:29:55,890 --> 00:30:01,470
to my old job, and they just
adopted react. So it's You get a

444
00:30:01,950 --> 00:30:04,440
gift for me to kind of refresh
myself with react as well.

445
00:30:06,600 --> 00:30:08,730
When are you gonna publish your
blazer blog engine?

446
00:30:10,559 --> 00:30:13,619
I'm not going to publish it
anytime soon for a blazer blog

447
00:30:13,619 --> 00:30:18,719
engine but but there's a handful
of I know, St. He did one as

448
00:30:18,719 --> 00:30:23,849
well on using blazer as a blog.
But his blog started ghost. It's

449
00:30:23,849 --> 00:30:26,129
just moving so fast. It's just
not there yet.

450
00:30:26,610 --> 00:30:29,640
Hosted live yet, I'm sure. But I
do wonder like if anyone's

451
00:30:29,640 --> 00:30:36,900
seriously building one, like,
commercial? I'm sure they might

452
00:30:36,900 --> 00:30:38,400
just wonder if they're building
it yet.

453
00:30:38,880 --> 00:30:42,750
Yeah. Well, I there's there's
some example, blazer blogs. I

454
00:30:42,750 --> 00:30:48,420
think Chris Sainty is the one
that did it. This way? I say

455
00:30:48,420 --> 00:30:57,180
it's like st with a Y on the
end. Yeah, I'm pretty sure he

456
00:30:57,180 --> 00:30:58,440
did something with a bug in
there.

457
00:31:00,240 --> 00:31:04,710
There's also a Gatsby version
for Vue JS counter with the name

458
00:31:04,710 --> 00:31:07,320
of it. It's called but it's it's
probably really similar.

459
00:31:12,420 --> 00:31:13,200
That's not it that

460
00:31:13,200 --> 00:31:15,060
page. But no, no, it's not.

461
00:31:17,580 --> 00:31:21,960
But anyway, yeah, it's coming.
But I would go. So blazer is an

462
00:31:21,960 --> 00:31:24,720
interesting phenomenon. They're
in that people are talking about

463
00:31:24,720 --> 00:31:26,580
what would you put in
production? Because it's not

464
00:31:26,580 --> 00:31:29,280
production code? And I'm like,
but the fact of the matter is

465
00:31:29,310 --> 00:31:31,650
the vast majority of everything
you're running in blazer

466
00:31:32,460 --> 00:31:36,360
production code. I mean, like,
like, I'm using mediator, that's

467
00:31:36,360 --> 00:31:39,390
the same mediator that's been
running in dotnet. For what,

468
00:31:39,540 --> 00:31:42,930
however, many years and all of
dotnet is production code. So

469
00:31:42,990 --> 00:31:45,390
the only difference is, is where
is it built? And how is it

470
00:31:45,450 --> 00:31:48,870
hosted? So there's some work,
but I mean, once once you get

471
00:31:48,870 --> 00:31:52,740
those kinks, it works. I just
put the crypto wallet out this

472
00:31:52,740 --> 00:31:55,980
weekend. And it's strong blazer,
that was kind of the deal. I

473
00:31:55,980 --> 00:31:57,540
told him I get the right into
whatever the hell I want to

474
00:31:57,540 --> 00:31:59,130
write it or not gonna do it.

475
00:32:01,080 --> 00:32:02,310
And they were happy with that.

476
00:32:03,630 --> 00:32:06,180
They're desperate for mine and
pay me squat. So his friend of

477
00:32:06,180 --> 00:32:10,830
mine, so are you gonna argue
they pay me like 400 bucks a

478
00:32:10,830 --> 00:32:14,100
month, like, Oh, God, I gotta
quit doing that shit, but

479
00:32:17,550 --> 00:32:19,650
smarter, they're gonna start
making money as opposed to just

480
00:32:19,650 --> 00:32:26,730
helping people for free. But I
still enjoy it. So if you don't

481
00:32:26,730 --> 00:32:28,800
have anything, how much
experience do you have in fluent

482
00:32:28,800 --> 00:32:29,580
validation?

483
00:32:30,300 --> 00:32:31,080
I have used it.

484
00:32:32,460 --> 00:32:37,950
I have used it for years. Yeah.
Yeah. So much more complex. I

485
00:32:37,950 --> 00:32:42,990
want to do the more complex
stuff. Number one, number one

486
00:32:42,990 --> 00:32:48,000
would be the knowledge check. So
speaking of that app, let me let

487
00:32:48,000 --> 00:32:53,700
me pull it up real quick. that I
use for validation for my, for

488
00:32:53,700 --> 00:32:58,680
my blazer forms in there. But I
do this double check crap that I

489
00:32:58,680 --> 00:33:00,150
shouldn't have to do.

490
00:33:00,660 --> 00:33:02,220
They should use guard clauses
for that.

491
00:33:03,330 --> 00:33:08,730
No, it's so fluance checking for
if it's required, right? Then I

492
00:33:08,730 --> 00:33:11,340
have something else down the
block. And I know there's a way

493
00:33:11,340 --> 00:33:14,100
to do it. I just pulled up this
video. I'm like, I'm gonna watch

494
00:33:14,100 --> 00:33:15,780
this. So I can quit guessing

495
00:33:16,260 --> 00:33:17,160
you'll share your screen.

496
00:33:18,870 --> 00:33:24,780
I get there in a second. Oh,
crap, it's not gonna work,

497
00:33:24,780 --> 00:33:30,630
because I just upgraded the
damn. SDK. But the code still

498
00:33:30,630 --> 00:33:36,330
work. For me, I can still show
the code. Okay. For some reason,

499
00:33:36,330 --> 00:33:39,630
Microsoft core decided that it
was a good idea to not upgrade

500
00:33:39,630 --> 00:33:45,300
side by side on the on the, on
the previews. Now, if you could

501
00:33:45,300 --> 00:33:47,700
talk to somebody and tell them,
that's the dumbest concept ever,

502
00:33:47,910 --> 00:33:52,530
because the preview people are
the ones that need the side by

503
00:33:52,530 --> 00:33:53,640
side more than anyone.

504
00:33:55,980 --> 00:33:58,290
saralee want to fill up their
hard drive with separate side by

505
00:33:58,290 --> 00:34:00,690
side 20 gig preview install,
takes you

506
00:34:00,690 --> 00:34:04,620
20 seconds to install the dumb
thing. Yeah, that's true. So it

507
00:34:04,620 --> 00:34:06,780
literally breaks your build. So
if you go with the previous

508
00:34:06,780 --> 00:34:09,300
preview, if you got everything
running, and you install the new

509
00:34:09,300 --> 00:34:11,850
one, it you can't compile the
old one anymore without

510
00:34:11,880 --> 00:34:14,460
uninstalling the new one and
compiling the old one. And

511
00:34:14,460 --> 00:34:17,580
typically, you want to say, you
know, was it running before? Did

512
00:34:17,580 --> 00:34:19,830
I break it with the new, you
know, you want to build and

513
00:34:19,830 --> 00:34:22,800
that's the whole point in global
Jason, right is to pick my SDK,

514
00:34:23,130 --> 00:34:26,760
right? And they broke the whole
the whole workflow. So

515
00:34:27,180 --> 00:34:29,610
your problem is that you're not
building with containers, if you

516
00:34:29,610 --> 00:34:32,160
had a Docker container was doing
your build that had the preview

517
00:34:32,160 --> 00:34:36,510
version on it. Container around
and it is the thing that builds

518
00:34:36,990 --> 00:34:38,790
and then you just get a new
container with the new preview

519
00:34:38,790 --> 00:34:39,900
and use that as your build
engine.

520
00:34:40,499 --> 00:34:42,449
Yeah, that's what I said when
they did it. I'm like crap. Now

521
00:34:42,449 --> 00:34:44,339
I don't have to go fire up
Dockers and keep a bunch of

522
00:34:44,339 --> 00:34:46,379
containers hanging around. I
could fill up my whole engine

523
00:34:46,379 --> 00:34:48,269
with containers, which is a
whole lot bigger than

524
00:34:48,690 --> 00:34:52,080
right, right? SDK is not
necessarily bigger than Visual

525
00:34:52,080 --> 00:34:52,770
Studio, but yeah.

526
00:34:54,150 --> 00:34:56,670
Well, I have to put Visual
Studio on the container at least

527
00:34:56,670 --> 00:34:57,060
dotnet

528
00:34:57,090 --> 00:35:01,560
now just on it, yeah, just just
the dotnet runtime. Yeah, but

529
00:35:01,800 --> 00:35:03,420
alright, do you want me to let
you share?

530
00:35:04,770 --> 00:35:08,280
See if I got my link find the
source real quick client

531
00:35:09,510 --> 00:35:10,950
feature.

532
00:35:13,799 --> 00:35:17,489
And are you using? You're using,
you know, verbose, like what's

533
00:35:17,489 --> 00:35:22,289
on my screen right now? things
not not attributes right?

534
00:35:22,950 --> 00:35:31,680
Correct. Correct. Good old. Good
old. Well, fluent. Yeah. So let

535
00:35:31,680 --> 00:35:34,890
me see here. What am I doing?
I'm trying to send edge currency

536
00:35:34,890 --> 00:35:40,590
wallets. Sin has a validator
right here. Okay, so how do I

537
00:35:40,590 --> 00:35:41,010
share

538
00:35:42,270 --> 00:35:44,340
the green button? So sure,

539
00:35:44,910 --> 00:35:46,800
yeah, I'm gonna have to find
that thing because

540
00:35:47,670 --> 00:35:49,830
the zoom window and share your
screen.

541
00:35:51,240 --> 00:36:00,420
share my screen share my screen,
which 1am I on? What do you see?

542
00:36:01,650 --> 00:36:10,500
so far? Nothing. darkness.
Darkness. Oh, oh. You started

543
00:36:10,500 --> 00:36:22,200
screen sharing but nothing's
coming through. Yes, code. Share

544
00:36:22,200 --> 00:36:37,020
your whole screen. Striking
share? screen? Sure. Steven T.

545
00:36:37,020 --> 00:36:44,430
Kramer has started screen share.
It's a field of blackness.

546
00:36:46,080 --> 00:36:51,600
Okay. Well, so much that right?

547
00:36:52,860 --> 00:36:54,360
Copy Paste the code into slack.

548
00:36:56,130 --> 00:37:00,420
Copy Paste the code into Slack,
that'll work. I'll collapse my

549
00:37:00,420 --> 00:37:10,140
regions, and then paste it to
say Japan. All right. Just throw

550
00:37:10,140 --> 00:37:13,950
it into coaching session. Oh,
well, why don't I just give you

551
00:37:13,950 --> 00:37:16,920
the it's all on GitHub. This is
the open source project,

552
00:37:17,339 --> 00:37:18,509
or that that works to

553
00:37:21,300 --> 00:37:29,370
get that that didn't work.
blazer state. Now, that one?

554
00:37:38,730 --> 00:37:44,340
Positive carries anthem gold. So
it's a gold backed crypto.

555
00:37:46,170 --> 00:37:47,310
What's the username, I'm gonna.

556
00:37:50,310 --> 00:37:55,140
Here's the GitHub repo. I'll
paste it into coaching sessions,

557
00:37:55,140 --> 00:37:59,910
I guess. There's that so we go
through some source into the

558
00:37:59,910 --> 00:38:03,360
quiet talk, give you the exact
page and then in the features,

559
00:38:04,170 --> 00:38:09,270
edge, edge currency wallet,
we're gonna do a sin. So we're

560
00:38:09,270 --> 00:38:13,080
actually trying to send some
money and have a send validator

561
00:38:13,080 --> 00:38:17,310
there. So this will be the link
to that.

562
00:38:21,480 --> 00:38:22,140
Sure, I got it.

563
00:38:22,740 --> 00:38:27,540
Yep, that's it. So you'll see if
scroll down a little bit, I do

564
00:38:27,540 --> 00:38:32,700
some, I do some not empty stuff.
destination address, for

565
00:38:32,700 --> 00:38:36,930
example. That second one, see
where I do not empty as on line

566
00:38:36,930 --> 00:38:41,280
29 and 30. And then I do
effectively the same thing on

567
00:38:41,280 --> 00:38:48,690
line 34. On the other, there's
some way better to do that. I

568
00:38:48,690 --> 00:38:51,750
don't know if I put it in a win
in a win clause somehow or

569
00:38:51,750 --> 00:38:57,570
another. So if I wrap that whole
thing to say, maybe, maybe if I

570
00:38:57,570 --> 00:39:02,820
put the not empty check in a
wind clause or something, I

571
00:39:02,820 --> 00:39:05,400
don't know I haven't done it for
a while. I've told my I've

572
00:39:05,400 --> 00:39:09,210
taught my other men by the kids
I apprentice to split study

573
00:39:09,210 --> 00:39:11,190
frickin fluid validation, and
then help me.

574
00:39:13,380 --> 00:39:15,810
So do you have test for this? Is
that how you know whether or not

575
00:39:15,810 --> 00:39:16,230
it works?

576
00:39:17,130 --> 00:39:19,890
Yeah, there's a there's a
there's a test case just for the

577
00:39:19,890 --> 00:39:23,460
validation rules. A ton of them
actually.

578
00:39:23,730 --> 00:39:26,820
So you know whether or not
you're hitting this one, versus

579
00:39:26,850 --> 00:39:28,950
you're hitting this one? Well,

580
00:39:29,010 --> 00:39:33,750
it there's a way that you can
fail out right if on a on a

581
00:39:33,750 --> 00:39:38,280
test. But I wanted to continue
on all, you know, give it give

582
00:39:38,280 --> 00:39:40,200
everybody all the errors that
they have when they submit it

583
00:39:40,200 --> 00:39:43,980
not just the first one, right?
Sure. So I could tell that but

584
00:39:44,010 --> 00:39:46,710
but I but there's some way
inside of validation to tell

585
00:39:46,710 --> 00:39:51,030
that second one to say don't
don't bother to check this guy

586
00:39:51,060 --> 00:39:52,980
if it's empty.

587
00:39:55,620 --> 00:40:00,390
I see. So you only want to check
this address. If you This one

588
00:40:00,390 --> 00:40:03,690
is. And the only reason you need
this is because you're checking

589
00:40:03,690 --> 00:40:06,630
all of them. If this had blown
up and short circuited the whole

590
00:40:06,630 --> 00:40:11,760
validation, yeah, then it got,
Okay, I see the problem now. So,

591
00:40:12,030 --> 00:40:17,340
so you're, you want it to do all
of them. But but still do only

592
00:40:17,340 --> 00:40:20,880
some of them, you know, given
certain traditionally certain

593
00:40:20,880 --> 00:40:21,540
things being there.

594
00:40:22,140 --> 00:40:23,700
Yeah, cuz there's a lot of
they're basically knowledge

595
00:40:23,700 --> 00:40:28,230
checks, right? It's, you'll see
it again down there on line 46.

596
00:40:28,560 --> 00:40:31,020
Or I'm doing another check,
well, obviously, I can't check

597
00:40:31,320 --> 00:40:34,440
greater than zero, which these
are strings, by the way, cuz

598
00:40:34,440 --> 00:40:38,100
they're, they're like numbers,
but they're strings. Cuz they're

599
00:40:38,100 --> 00:40:42,930
big integers effectively. And I
saw I converted to a big end,

600
00:40:42,930 --> 00:40:47,100
but if it's empty, it throws an
exception, right? So I want to,

601
00:40:47,190 --> 00:40:50,130
I want to avoid that exception,
but there's a better way to do

602
00:40:50,130 --> 00:40:51,030
that there's some way

603
00:40:51,300 --> 00:40:54,210
or is there a chain off of rule
for like, I would expect

604
00:40:54,210 --> 00:40:57,900
somewhere on this one for there
to be something like a than or

605
00:40:57,900 --> 00:41:00,630
if valid then or something like
that. So that then you would

606
00:41:00,630 --> 00:41:06,060
only come into this subsequent
rule if, if this rule passed. If

607
00:41:06,060 --> 00:41:08,820
that doesn't exist, then it
should, because then this would

608
00:41:08,820 --> 00:41:12,240
just chain in, and you'd have a
more elegant syntax for those

609
00:41:12,450 --> 00:41:15,390
without having to do this crap
here. That's basically doing

610
00:41:15,390 --> 00:41:16,290
some of the already checked.

611
00:41:16,890 --> 00:41:21,810
I think, if you put the if you
put the when I'm guessing here,

612
00:41:21,840 --> 00:41:25,380
but I think I could put the
whole rule for 4941 there and

613
00:41:25,380 --> 00:41:28,260
42. Inside the when clause.

614
00:41:29,760 --> 00:41:30,540
Inside here.

615
00:41:31,320 --> 00:41:34,320
Yeah, so that's gonna say,
because it only execute the

616
00:41:34,320 --> 00:41:37,620
other stuff if the win is true,
right? So that would actually it

617
00:41:37,620 --> 00:41:39,990
kind of looks backwards. But but
it actually makes sense the

618
00:41:39,990 --> 00:41:43,290
stuff in the when clause gets
executed before the rule does.

619
00:41:43,650 --> 00:41:47,760
And maybe maybe that works.
Maybe it works, I don't know, if

620
00:41:47,760 --> 00:41:51,540
you'd use I know you've you've
mentioned it, but I know how to

621
00:41:51,540 --> 00:41:54,870
do everything. It can do
everything. It's impressive. And

622
00:41:54,870 --> 00:41:57,660
I used to be able to do more,
but I got back to it the other

623
00:41:57,660 --> 00:41:59,910
day, and I'm like, I can't
remember how to do it. But I'm

624
00:41:59,910 --> 00:42:02,190
like, make it work. I got to
ship this thing was two o'clock

625
00:42:02,190 --> 00:42:03,510
in the morning. I'm like, I get
this out.

626
00:42:04,230 --> 00:42:06,420
So and this is all using blazer.

627
00:42:07,650 --> 00:42:13,740
Yeah, that's all using laser.
Nice. So they're all every one

628
00:42:13,740 --> 00:42:16,440
of those. See, those are all
mediator action handler, all of

629
00:42:16,440 --> 00:42:21,180
those guys, right? Oh, I call
them actions when they're on the

630
00:42:21,210 --> 00:42:25,680
client side. And I call them
request and response when they

631
00:42:25,680 --> 00:42:29,340
go to the server just to
distinguish between the two. So

632
00:42:29,340 --> 00:42:34,170
these are client side mediators,
items there. So they'll hit. So

633
00:42:34,170 --> 00:42:37,260
a forum sends that action, it
goes to the handler, and all

634
00:42:37,260 --> 00:42:43,290
uses my uses my blazer state
component. But you haven't done

635
00:42:43,290 --> 00:42:48,000
a code review yet. Tell me if
you think so. encapsulation.

636
00:42:49,200 --> 00:42:53,910
Yeah. encapsulation. So if you
go look at these guys, look at

637
00:42:53,910 --> 00:42:57,510
those state down there. So edge
state, that's good enough.

638
00:42:57,510 --> 00:42:58,140
That'll work.

639
00:42:59,280 --> 00:42:59,700
Okay.

640
00:43:01,980 --> 00:43:06,810
Okay, so these are partial
classes. Well, I broke them up

641
00:43:06,960 --> 00:43:10,020
only in the state that I break
them up this way. So if you look

642
00:43:10,020 --> 00:43:13,170
at the behavior, so I need
certain things to implement it

643
00:43:13,170 --> 00:43:16,890
in order for this thing to work.
So here is you'll see,

644
00:43:17,490 --> 00:43:19,470
and this base type is what
you're getting out of blazer

645
00:43:19,470 --> 00:43:21,150
state. Yeah,

646
00:43:21,180 --> 00:43:25,110
yeah, that base that base state
there is. So I need you to be

647
00:43:25,110 --> 00:43:27,210
able to clone I need an
initialized to initialize the

648
00:43:27,210 --> 00:43:30,060
state when you start at the
client side. So that's what's

649
00:43:30,060 --> 00:43:33,270
there. And then there's another
one, oh, maybe there's no debug

650
00:43:33,270 --> 00:43:35,640
on this one. But normally, I
have a debug one that's

651
00:43:35,640 --> 00:43:39,810
basically conditional compile in
just so that I can do some extra

652
00:43:39,810 --> 00:43:41,190
testing, right.

653
00:43:45,510 --> 00:43:49,110
One nice thing about Visual
Studio 19 2019 is you can just

654
00:43:49,290 --> 00:43:51,810
clone a GitHub repo and have it
open up immediately and

655
00:43:52,709 --> 00:43:54,989
yeah, you go you'll be open up
but I doubt highly if you'll be

656
00:43:54,989 --> 00:43:57,869
able to build because you won't
have the right because of the

657
00:43:57,869 --> 00:44:00,539
stupid side by side you won't
have the right previews required

658
00:44:00,539 --> 00:44:01,289
to build that thing.

659
00:44:02,280 --> 00:44:08,730
Probably not I don't have any
previews. on them, I get it.

660
00:44:09,420 --> 00:44:11,550
Yeah, because it'll just
squatting in doesn't do is pick

661
00:44:11,550 --> 00:44:18,840
this solution automatically. So
that's probably why these loads

662
00:44:18,840 --> 00:44:21,990
are all failing is because maybe

663
00:44:23,490 --> 00:44:32,280
the loads to load should work.
The load should work. Projects

664
00:44:32,310 --> 00:44:33,150
are located there.

665
00:44:33,149 --> 00:44:36,929
So the project just regular
dotnet core projects, right. So

666
00:44:36,929 --> 00:44:37,589
that's Yeah,

667
00:44:37,860 --> 00:44:44,700
yeah. cs project. That's, that's
pretty much my, my structure

668
00:44:44,700 --> 00:44:45,060
there.

669
00:44:45,690 --> 00:44:47,370
Folks. Keep looking at it in
GitHub.

670
00:44:48,000 --> 00:44:50,400
Yeah. Interesting. Interesting
thing though with with blazer,

671
00:44:50,400 --> 00:44:53,580
you have that shared, so your
details that go back and forth.

672
00:44:53,970 --> 00:44:57,210
That folder up there that says
dtos is actually between

673
00:44:57,360 --> 00:45:01,500
JavaScript and blazer, those
That's an interesting thing

674
00:45:01,500 --> 00:45:04,650
phenomenon. Now I actually have
data transfer objects on the

675
00:45:04,650 --> 00:45:08,790
client that go back and forth
between JavaScript interop

676
00:45:10,530 --> 00:45:13,080
is edge meaning client. That
means

677
00:45:13,140 --> 00:45:15,780
no edge is a product. That's the
JavaScript library that I'm

678
00:45:15,780 --> 00:45:18,180
using. So it's an external
JavaScript library.

679
00:45:18,540 --> 00:45:21,810
Okay, so client over here is
client. So that

680
00:45:21,840 --> 00:45:26,670
that is what the webassembly
runs, could run on the server

681
00:45:26,670 --> 00:45:29,700
side, too. But that's the actual
UI client. So this is just an

682
00:45:29,700 --> 00:45:32,460
MVC application. Here, you'll
see it also, if you go to

683
00:45:32,460 --> 00:45:39,150
features. Here, if you can show
you can show my, yeah, just do

684
00:45:39,150 --> 00:45:42,150
the just do the weather forecast
thing. It's about as simple as,

685
00:45:42,750 --> 00:45:46,200
as it gets. That you want to see
the smallest controller on the

686
00:45:46,200 --> 00:45:53,070
planet. Those are pretty small
controllers. They don't I don't

687
00:45:53,070 --> 00:45:56,490
do anything. I just just a model
binder

688
00:45:57,150 --> 00:45:58,680
is not constant for the route.

689
00:45:59,790 --> 00:46:02,850
Yes, that is a very nice
feature, by the way, because now

690
00:46:02,850 --> 00:46:05,700
if you're in a view, and you
want to redirect to a route, you

691
00:46:05,700 --> 00:46:08,250
don't have to do any magic
strings. It's right there. And

692
00:46:08,250 --> 00:46:12,060
that how do you get that it's a
single endpoint per controller.

693
00:46:12,780 --> 00:46:16,170
There's, that's a mistake, in my
opinion, Microsoft did early on

694
00:46:16,170 --> 00:46:18,420
is this, these controllers, I'm
like, you have a stateless

695
00:46:18,420 --> 00:46:20,730
system. And they're separate
endpoints, there is no, there's

696
00:46:20,730 --> 00:46:23,970
no correlation between the
endpoints. Now because somebody

697
00:46:23,970 --> 00:46:27,540
thought that they should have
this rule about slash controller

698
00:46:27,540 --> 00:46:31,050
name, slash action name, that
somehow these things should go

699
00:46:31,050 --> 00:46:36,600
together. And why. So if you get
rid of that philosophy, and you

700
00:46:36,600 --> 00:46:39,510
just say, every controller is a
single endpoint, well, then you

701
00:46:39,510 --> 00:46:42,600
can put all the controller
related stuff right there. So

702
00:46:42,600 --> 00:46:46,920
the route is in that, in this
case, because of, because of

703
00:46:46,920 --> 00:46:51,090
blazer I can share, I can share
objects. So that's what the

704
00:46:51,090 --> 00:46:54,450
shared folder is the request and
the response are shared inside

705
00:46:54,480 --> 00:46:59,070
of the shared project. For the
same, they'll be in the same

706
00:46:59,070 --> 00:47:01,440
structure, I would like for them
to be in the same place, but

707
00:47:01,440 --> 00:47:05,130
right currently have to be in a
different DLL. But you'll see

708
00:47:05,130 --> 00:47:08,370
that request response right
there. So I don't have to create

709
00:47:08,370 --> 00:47:13,350
a DTO. Right, because I use the
same code on blazer, as I do on

710
00:47:13,350 --> 00:47:17,490
the the other side, and I put
the route right in there so that

711
00:47:18,270 --> 00:47:21,360
the request only has one
endpoint. So so that makes sense

712
00:47:21,360 --> 00:47:26,610
as well. On an MVC app, I just
use it on the controller itself,

713
00:47:26,610 --> 00:47:29,640
but in this case, I share it on
the request object as to where

714
00:47:29,640 --> 00:47:33,540
the route goes. But But works
works works pretty nice.

715
00:47:34,770 --> 00:47:37,140
Why am I waiting the request ID?

716
00:47:38,790 --> 00:47:42,990
request ID is just a it's just
something for me to correlate

717
00:47:42,990 --> 00:47:47,250
between requests and responses
and logging. Okay, every one of

718
00:47:47,250 --> 00:47:50,070
them is good, it just gets
randomly created good. So I can

719
00:47:50,070 --> 00:47:53,310
say, so when you log something,
it's this request and which

720
00:47:53,310 --> 00:47:56,190
response because you know,
they're, they're asynchronous so

721
00:47:56,190 --> 00:47:58,350
they may show up in different
orders but you can always match

722
00:47:58,350 --> 00:47:59,760
up a request with its response

723
00:48:00,090 --> 00:48:00,930
Okay, got it.

724
00:48:03,510 --> 00:48:06,630
It don't have to have it
actually but I like it as a

725
00:48:06,630 --> 00:48:16,170
feature so my full validation on
that thing was was I need to

726
00:48:16,170 --> 00:48:19,440
improve but I'll probably blog
about it this week on how to do

727
00:48:19,440 --> 00:48:25,050
those correctly after I watched
this guy's video figured out so

728
00:48:25,080 --> 00:48:29,370
the state the state the way
every one of those handlers will

729
00:48:29,370 --> 00:48:32,760
look at that get application
handler there I hope I have it

730
00:48:32,760 --> 00:48:42,540
on that one. I should so notice
that I'm lying to you

731
00:48:44,280 --> 00:48:45,090
looking for state

732
00:48:46,019 --> 00:48:51,719
Oh hold on let me find all these
handlers should be

733
00:48:57,270 --> 00:48:59,460
Do you want to try and demo this
for us? Maybe next week?

734
00:49:00,450 --> 00:49:07,380
I can sure I absolutely can.
Yeah, yeah, yep. You can see the

735
00:49:07,560 --> 00:49:13,440
website working now the
cryptocurrency but but yeah,

736
00:49:13,470 --> 00:49:16,440
next week I'll put together
we'll do I'll do a blazer state

737
00:49:16,500 --> 00:49:17,130
demo for you

738
00:49:17,130 --> 00:49:18,990
know make sure you've got three
preview builds and all that

739
00:49:20,730 --> 00:49:23,850
Yeah, I'm in the midst of this
week trying to upgrade to the to

740
00:49:23,850 --> 00:49:26,730
the new bits and trying to I'm
on nightly builds now trying to

741
00:49:27,240 --> 00:49:31,800
catch up. Which is also non
trivial. Do you have you done

742
00:49:31,800 --> 00:49:33,960
that? I know you're writing all
the docs

743
00:49:33,990 --> 00:49:36,000
nightly builds. I haven't done
docs for them for a little

744
00:49:36,000 --> 00:49:41,430
while. But a year I think so.
I'm working on architecture

745
00:49:43,140 --> 00:49:44,310
commits last week

746
00:49:44,970 --> 00:49:46,170
to the docs No.

747
00:49:47,100 --> 00:49:49,860
I stopped you remember you
committed something today? SP

748
00:49:49,860 --> 00:49:50,940
dotnet core last week.

749
00:49:52,740 --> 00:50:00,270
Maybe one thing but yeah, if you
go to GitHub comm ASP. NET If

750
00:50:00,750 --> 00:50:05,490
you shop on web go here you shop
on web is my thing yeah that's

751
00:50:05,490 --> 00:50:09,390
what I'm talking about that's
not the back so right that's

752
00:50:09,390 --> 00:50:12,150
that's the architecture stuff
I'm talking about. So yeah I

753
00:50:12,150 --> 00:50:14,040
used to be the number one
contributor on this because I

754
00:50:14,040 --> 00:50:18,000
did all this work way back here
right but then I you know, it

755
00:50:18,000 --> 00:50:21,780
settled down up through middle
of 2017 and then I haven't done

756
00:50:21,780 --> 00:50:26,220
anything much with it since July
of 2017 so all these a full time

757
00:50:26,220 --> 00:50:30,240
folks have passed me and guard
Rex they basically picked him up

758
00:50:30,240 --> 00:50:33,960
because he's super cheap
charging more and so he's been

759
00:50:33,960 --> 00:50:36,120
doing it more since he fell off

760
00:50:36,930 --> 00:50:42,630
he's been doing the docks What's
that? He's been doing the docks

761
00:50:42,630 --> 00:50:44,610
guard Rex I've been seeing him
name quite a bit

762
00:50:44,790 --> 00:50:48,510
yeah, he's doing a lot like I
say he his rate was like half

763
00:50:48,510 --> 00:50:53,340
mine so that's fine he can he
can run with that. But yeah, the

764
00:50:53,340 --> 00:50:56,640
shop on web stuff is a separate
repo separate team at Microsoft.

765
00:50:57,660 --> 00:51:01,050
And that's that's this one. So
if you look at the whatever

766
00:51:01,050 --> 00:51:03,570
insights and commits here

767
00:51:05,010 --> 00:51:07,260
right yeah, but that's a that's
a Microsoft repo

768
00:51:07,649 --> 00:51:10,259
right? Yeah, it's still
Microsoft repo but but this is

769
00:51:10,259 --> 00:51:13,589
what I'm working on. Along with
my friend Eric, who have

770
00:51:13,589 --> 00:51:14,339
enlisted help me.

771
00:51:16,050 --> 00:51:18,630
Yeah, I've tried to keep track
of bro Wow, he

772
00:51:18,630 --> 00:51:22,410
that I haven't seen that. You
see actually patient?

773
00:51:26,130 --> 00:51:27,840
Why, why? turtle Why?

774
00:51:30,120 --> 00:51:31,110
I think I am to

775
00:51:31,290 --> 00:51:36,150
actually have Azure, Azure has
all free. Well, GitHub has free

776
00:51:36,360 --> 00:51:37,710
private repos now to

777
00:51:40,050 --> 00:51:41,160
fill here's a black frog.

778
00:51:49,980 --> 00:51:52,860
GitHub is free. Private repos.
Now.

779
00:51:53,130 --> 00:51:54,540
Yeah, since January 1,

780
00:51:56,250 --> 00:51:57,210
I'm paying for nothing.

781
00:51:57,480 --> 00:51:58,230
Why am I paying them?

782
00:52:02,340 --> 00:52:07,200
So let me see. So GitHub later
state, so I use partial classes

783
00:52:08,730 --> 00:52:13,860
to encapsulate so that the
state, you know, in Redux, they

784
00:52:13,860 --> 00:52:17,400
tell you state needs to be
immutable. I'm not exactly sure

785
00:52:17,400 --> 00:52:20,070
why they tell me that, frankly,
other than the fact that I need

786
00:52:20,070 --> 00:52:27,660
to be able to revert back. Yeah,
that's that's the one. So I use

787
00:52:27,660 --> 00:52:32,220
partial classes in all of my
states.

788
00:52:36,660 --> 00:52:39,780
Now, what's the purpose of this
is to manage your client side

789
00:52:39,780 --> 00:52:40,170
state?

790
00:52:41,340 --> 00:52:43,290
Yep. So think Redux, right.

791
00:52:43,980 --> 00:52:47,160
I don't use react or Redux. So I
can think Redux. But it won't

792
00:52:47,160 --> 00:52:48,000
really do it for

793
00:52:48,030 --> 00:52:50,970
I won't help you. Yeah, so it's
just client side state. So I

794
00:52:50,970 --> 00:52:56,070
need I want to manage the state,
anywhere in the in the app.

795
00:52:56,370 --> 00:53:00,540
Right? So everybody inherits
from this state. And it's a

796
00:53:00,540 --> 00:53:04,800
mediator pipeline. And what it
has, what it does is, which is

797
00:53:04,800 --> 00:53:06,900
really trivial. It's just a
collection, right? It's just a

798
00:53:06,900 --> 00:53:08,010
collection of these things.

799
00:53:08,130 --> 00:53:10,410
And for this state, you're
really just talking about a

800
00:53:10,500 --> 00:53:13,050
collection of data that you're
holding in place, not the state

801
00:53:13,050 --> 00:53:16,380
design pattern where you're
doing straight state transitions

802
00:53:16,380 --> 00:53:17,490
from one state to another.

803
00:53:17,940 --> 00:53:21,120
Correct. It's just this is this
is state like as in what react

804
00:53:21,120 --> 00:53:23,490
would call state, it's just like
the global state for the app,

805
00:53:23,490 --> 00:53:27,780
right? It's in memory database
for the app, right? All right,

806
00:53:28,380 --> 00:53:32,850
for the client side, for all,
that all of the changes take

807
00:53:32,850 --> 00:53:37,290
place through through the
pipeline. So what I do is I

808
00:53:37,290 --> 00:53:44,700
actually clone a clone the state
before any event is handled. So

809
00:53:44,700 --> 00:53:47,490
there's clone, then there is
after that is the actual

810
00:53:47,490 --> 00:53:50,640
handler, which is modify, and
then after that, I fire off

811
00:53:50,640 --> 00:53:56,160
subscriptions. So the so that
the so there's, these are all

812
00:53:56,190 --> 00:54:01,290
this is all done with the with
the mediator. So that was why

813
00:54:01,290 --> 00:54:04,200
you saw on that state before I
had a clone implementation. I

814
00:54:04,200 --> 00:54:07,950
couldn't think of any better way
to do it than then use clone to

815
00:54:07,950 --> 00:54:14,070
clone the state. So some people
don't like clone. But I think

816
00:54:14,070 --> 00:54:16,290
it's a bit odd that it doesn't
return back an object up that's

817
00:54:16,290 --> 00:54:21,660
tight. But I understand why they
did that. But you have to cast

818
00:54:21,660 --> 00:54:28,530
it. So what, right, right. Yeah,
so so whenever anybody mutate

819
00:54:28,530 --> 00:54:31,410
state, they don't have to think
about like in Redux. And Redux,

820
00:54:31,410 --> 00:54:34,710
you have to say, I'm gonna use
my reducer and make sure that I

821
00:54:34,710 --> 00:54:39,390
return a new object. But blazer
state, you just mutate it all

822
00:54:39,390 --> 00:54:42,180
you want. Because I've already
I've already created a new one.

823
00:54:42,240 --> 00:54:45,420
So the paradigm that I typically
do is is that is that we give

824
00:54:45,420 --> 00:54:47,400
you the state and then you
create a new one before you

825
00:54:47,400 --> 00:54:50,490
update the store. Right? I'm
like, Well, if if everything

826
00:54:50,490 --> 00:54:53,850
comes back to me from a handler,
then I know you're going to

827
00:54:53,850 --> 00:54:57,180
change state. So whichever state
that your handler returns, I'll

828
00:54:57,180 --> 00:54:59,160
just give you a copy of that to
start with and then you don't

829
00:54:59,160 --> 00:55:01,950
have to think about it. When you
when you use it, so you can just

830
00:55:01,950 --> 00:55:12,000
mutate state, all you want in
theory seems to work. And I

831
00:55:12,000 --> 00:55:14,250
encapsulate the private part,
that's what I want to show you.

832
00:55:14,250 --> 00:55:18,180
Let me see if I can get to that
real quick. So that the handlers

833
00:55:18,180 --> 00:55:23,310
are actually partial classes.
Let's see JavaScript, let's go

834
00:55:23,310 --> 00:55:27,030
routing. Maybe routing has
actions in there, change route

835
00:55:27,060 --> 00:55:34,860
change route. handler will come
up. So yeah, that works go to

836
00:55:34,950 --> 00:55:44,280
change go to, into source
blazer, state features routing,

837
00:55:47,400 --> 00:55:55,470
actions change route handler. So
this is kind of weird, but so

838
00:55:55,470 --> 00:55:59,340
you see that the change route
handler is a is a actually an

839
00:55:59,340 --> 00:56:05,370
internal class, or a child class
of Route state itself. So this

840
00:56:05,370 --> 00:56:09,660
is how I managed to make sure
everything is private. So that

841
00:56:09,660 --> 00:56:14,250
nobody can modify mutate state,
the handler itself is a is a

842
00:56:14,250 --> 00:56:20,880
child class of the state that it
modifies. Okay. So

843
00:56:22,260 --> 00:56:24,570
so it's only going to be or
nougat package or whatever.

844
00:56:25,020 --> 00:56:28,230
Yeah, but Right, right. So the
point being is, is that, but

845
00:56:28,230 --> 00:56:31,650
this is the way I implement
them. That's a design pattern to

846
00:56:31,650 --> 00:56:35,130
go with for everything, so that
nobody can mutate your state

847
00:56:35,130 --> 00:56:37,620
without going through a handler,
because all of your state's

848
00:56:37,620 --> 00:56:40,650
actually private. But the
interesting part is, is this the

849
00:56:40,650 --> 00:56:44,040
child class of your class has
access to your private parts?

850
00:56:44,310 --> 00:56:47,670
Right? I've used that technique
before as well. It's nice.

851
00:56:48,209 --> 00:56:52,649
Yeah. So I originally back in my
Delphi days, actually, I made a

852
00:56:52,649 --> 00:56:56,159
rule that was like no child
classes, right? Because it just

853
00:56:56,159 --> 00:56:59,639
tend to obfuscate stuff. And
since I've moved to C sharp, I

854
00:56:59,639 --> 00:57:02,489
fallen in love with it as an
encapsulation method that I use

855
00:57:02,489 --> 00:57:04,019
them quite often now.

856
00:57:04,979 --> 00:57:08,039
Yeah, another use I have for
them is, when you're organizing

857
00:57:08,279 --> 00:57:11,609
enums and constants, you can use
that as a technique to get you

858
00:57:12,539 --> 00:57:15,659
know, the ability to drill down
as if they were namespaces still

859
00:57:15,659 --> 00:57:18,419
have everything in one folder.
Right? So if you have a bunch of

860
00:57:18,419 --> 00:57:21,419
constants, you want to group
them, or you can put them into

861
00:57:21,629 --> 00:57:25,469
in your child classes of the
parent class to give you that

862
00:57:25,469 --> 00:57:27,959
same type of discoverability.

863
00:57:28,649 --> 00:57:34,619
You guys understand what I'm
talking about? Philip? Now? So

864
00:57:36,240 --> 00:57:40,500
what he's saying is this route
state has an internal or private

865
00:57:40,500 --> 00:57:44,220
state property, where's rep
state defined? Over in source

866
00:57:44,250 --> 00:57:46,740
over here somewhere? I don't
know where it is. Should have

867
00:57:46,740 --> 00:57:51,180
been right underneath where
you're at? Yeah, so route state

868
00:57:51,180 --> 00:57:53,850
has? Uh,

869
00:57:55,860 --> 00:57:57,990
yeah, would have been somewhere
it would have been, it would

870
00:57:57,990 --> 00:58:00,540
have been that one. That's only
gonna have one route, it's just

871
00:58:00,540 --> 00:58:02,220
gonna have one property called
route.

872
00:58:02,490 --> 00:58:06,030
I see. Right? So this route has
is the data that he's trying to

873
00:58:06,030 --> 00:58:10,740
protect, right. And so it's got
a private setter. So only route

874
00:58:10,740 --> 00:58:14,460
state can set that route, which
it doesn't have any setters to

875
00:58:14,460 --> 00:58:17,280
do it. There's no need any logic
in here to do it. But because

876
00:58:17,550 --> 00:58:21,390
this is a partial class, he can
have another rep state somewhere

877
00:58:21,390 --> 00:58:24,930
else defined that adds
additional functionality, right?

878
00:58:24,930 --> 00:58:30,120
So this one over here, adds to
this partial class of routes.

879
00:58:31,140 --> 00:58:33,120
That does too, but and then the,

880
00:58:33,180 --> 00:58:35,190
the one that we were just
looking at was this change route

881
00:58:35,520 --> 00:58:40,080
handler. And it also despite its
name up here, is actually

882
00:58:40,080 --> 00:58:43,650
defining route state as another
partial class. And so all these

883
00:58:43,650 --> 00:58:46,650
partial classes are going to get
combined together at compile

884
00:58:46,650 --> 00:58:49,950
time as if they were one
definition. Okay? And then this

885
00:58:49,950 --> 00:58:55,020
internal class, which I would,
which you're using as your name

886
00:58:55,020 --> 00:58:58,020
here, so up here, so So even
though it's inside of outstayed,

887
00:58:58,020 --> 00:59:01,020
that's, that's the important
part of of this file. And so

888
00:59:01,020 --> 00:59:05,010
he's using that as a file name.
But it importantly, it has

889
00:59:05,010 --> 00:59:09,480
access to grab state's private
setter, right? So there's a that

890
00:59:09,540 --> 00:59:12,630
that route property somewhere.
This guy is going to touch that.

891
00:59:12,660 --> 00:59:13,530
I don't see it

892
00:59:13,620 --> 00:59:14,790
right there. Line 37.

893
00:59:15,840 --> 00:59:20,430
Oh, yeah. Okay, here. So it's
able to set it. Okay.

894
00:59:22,200 --> 00:59:28,320
Okay. So I wasn't familiar with
the partial class concept, or

895
00:59:28,320 --> 00:59:29,220
even internal.

896
00:59:31,050 --> 00:59:35,160
Yeah, this internal is a
different thing like this, if

897
00:59:35,160 --> 00:59:37,740
you get rid of that this class
could still live inside here.

898
00:59:38,160 --> 00:59:41,850
And that that's called a child
class, I think, is that what

899
00:59:41,850 --> 00:59:45,540
it's called? Or? Yes, I think
so. Class is confusing with

900
00:59:45,540 --> 00:59:48,150
inheritance, too, right? Because
if I inherit a state that's a

901
00:59:48,150 --> 00:59:52,410
child class, to me, it's an
embedded an inner, inner class,

902
00:59:52,950 --> 01:00:01,560
inner. But internal just means
that you can't do anything with

903
01:00:01,560 --> 01:00:06,060
this, this handler outside of
this project this assembly,

904
01:00:06,330 --> 01:00:09,930
okay, nested is a nested
classes, that's what they want

905
01:00:09,930 --> 01:00:13,170
to call it. Alright. So this is
a nested class, I hate that

906
01:00:13,170 --> 01:00:16,560
name, because it's nested with
inside, within wrap state.

907
01:00:17,910 --> 01:00:20,010
nested types is what the docs
goes with.

908
01:00:20,280 --> 01:00:27,780
Alright? Let's try to remember
that. Because you would think

909
01:00:27,780 --> 01:00:29,610
you would call them internal,
that we already use that word

910
01:00:29,610 --> 01:00:31,620
for something and you think we
call them child, but we already

911
01:00:31,620 --> 01:00:32,640
use that for something. It's
like,

912
01:00:34,080 --> 01:00:39,870
what else we call it? Yes, but I
like it. So so it's

913
01:00:39,870 --> 01:00:43,140
encapsulated? Right? I still
maintain the single

914
01:00:43,140 --> 01:00:45,810
responsibility principle,
because this handler doesn't do

915
01:00:45,810 --> 01:00:49,440
anything but one thing. Now one,
one could argue that the route

916
01:00:49,440 --> 01:00:52,620
state itself isn't the single
responsibility, but I would

917
01:00:52,620 --> 01:00:55,980
argue they're wrong. Because
it's the state and everything

918
01:00:56,190 --> 01:00:57,390
that manages it, right?

919
01:00:58,530 --> 01:01:01,230
Well, it depends how complex the
state is, I suppose if it's got

920
01:01:01,230 --> 01:01:03,540
literally one string, then it's
hard to argue that it doesn't

921
01:01:03,540 --> 01:01:07,620
have one responsibility. But if,
if your state for this thing

922
01:01:07,620 --> 01:01:13,440
had, you know, if the class
route state here had like, five

923
01:01:13,440 --> 01:01:16,380
different groups of five
properties that were each do

924
01:01:16,380 --> 01:01:19,470
different things like, yeah,
here's your shipping address,

925
01:01:19,470 --> 01:01:22,650
and here's your, you know, your
billing address, and here's your

926
01:01:22,800 --> 01:01:25,920
credit card details, right?
Those could all be different,

927
01:01:26,310 --> 01:01:28,590
potentially different
responsibilities. But, but I

928
01:01:28,590 --> 01:01:30,540
agree with you that just
managing that state could be

929
01:01:30,540 --> 01:01:31,620
just one responsibility.

930
01:01:33,060 --> 01:01:37,170
So it accomplished my goal of
making it so that nobody, nobody

931
01:01:37,170 --> 01:01:40,650
can actually mutate the state
without going through without

932
01:01:40,650 --> 01:01:42,900
going through the handlers,
which is what the objective is,

933
01:01:43,110 --> 01:01:45,270
when you build a pipeline use
the pipeline, right? I don't

934
01:01:45,270 --> 01:01:49,080
want people being able to
directly mutate it without going

935
01:01:49,080 --> 01:01:51,660
through the pipeline. So sure, I
have

936
01:01:51,660 --> 01:01:57,270
some concepts about the using
nested clauses, which xe can

937
01:01:57,270 --> 01:02:03,900
access private members of parent
class, because for one concern

938
01:02:03,900 --> 01:02:10,500
is discoverability. So when when
I opened my bar in class, I can

939
01:02:10,500 --> 01:02:16,560
see some private members there.
So in this is my context time of

940
01:02:16,560 --> 01:02:23,850
working with. So I, usually when
when I see some private members,

941
01:02:23,850 --> 01:02:28,830
I'm can freely refactor it in
any way, because I know those

942
01:02:28,830 --> 01:02:35,460
are private. And with this
approach of nested class, which

943
01:02:35,460 --> 01:02:43,050
is in some different folder, so
little bit weird, but I know I

944
01:02:43,050 --> 01:02:48,570
use that, but usually I use this
when both classes in the same

945
01:02:49,740 --> 01:02:54,030
file in the same folder, yeah,
or even same file. Like when you

946
01:02:54,030 --> 01:02:56,670
have generated code, and you
want to put your customizations

947
01:02:56,820 --> 01:02:59,610
right next to the generated
code. That's usually when I use

948
01:02:59,610 --> 01:03:02,670
partial classes, the most common
scenario anyway,

949
01:03:03,270 --> 01:03:05,880
but generated code Yeah, so that
you can just blow away the whole

950
01:03:05,880 --> 01:03:08,940
file. So but I'm using them
everything underneath that

951
01:03:08,940 --> 01:03:16,470
routing folder is all related.
So it's, it's in there, I and

952
01:03:16,470 --> 01:03:19,260
if you if you did refactor this,
right, if you said you know what

953
01:03:19,260 --> 01:03:22,200
routes not really a good name,
I'm gonna name this route

954
01:03:22,230 --> 01:03:27,030
string, right? or whatever, you
know, refactor, it'll still

955
01:03:27,030 --> 01:03:29,040
work, right? If you just do a
rename refactoring, it'll,

956
01:03:29,130 --> 01:03:33,030
you'll fix it here, too. If you
refactor it by hand, and you

957
01:03:33,030 --> 01:03:36,060
just change the name here and
you build, the compiler is going

958
01:03:36,060 --> 01:03:40,170
to tell you that it's broken
thing is broken. So I mean, I

959
01:03:40,170 --> 01:03:42,960
agree with you, Dennis, that
it's not as easy to see it all

960
01:03:42,960 --> 01:03:47,430
in one place. But to two things,
one, the compiler will help you

961
01:03:47,430 --> 01:03:52,740
it's not JavaScript. So we have
a compiler and into this code,

962
01:03:52,800 --> 01:03:55,590
nobody else but Kramer should
never have to look at because

963
01:03:55,590 --> 01:03:59,220
it's only in his nougat package.
So his clients of this code

964
01:03:59,820 --> 01:04:04,740
won't have to see it. So as long
as he knows how it's set up in

965
01:04:04,740 --> 01:04:07,410
his team of 1000s of developers
that eventually are going to

966
01:04:07,410 --> 01:04:08,010
support this.

967
01:04:09,210 --> 01:04:13,350
Yeah, I hope but it's a it's a
pretty common pattern. That's

968
01:04:13,350 --> 01:04:17,040
the same the way those are, are
organized anyway is pretty

969
01:04:17,040 --> 01:04:20,820
common. That's a feature folder.
Right or folder concept

970
01:04:21,000 --> 01:04:22,770
coming becoming more common.
Yeah.

971
01:04:23,670 --> 01:04:27,570
Yeah. So So I made the change
route handler there has that

972
01:04:27,570 --> 01:04:31,350
name, and it's it is a nested
class, but it is the only thing

973
01:04:31,350 --> 01:04:34,650
that matters about that
particular class. Right.

974
01:04:37,590 --> 01:04:43,140
I have a question. Sorry, I
noticed you are using using D

975
01:04:43,170 --> 01:04:50,850
directives inside the namespace.
How you will argue it argumented

976
01:04:51,060 --> 01:04:54,600
against using it outside of name
namespace,

977
01:04:55,200 --> 01:04:56,880
what we're using inside the
namespace

978
01:04:57,810 --> 01:05:00,630
using directives. Oh, here,

979
01:05:00,720 --> 01:05:06,930
okay. Yeah, I've seen that
gobos. Actually, Personally, I

980
01:05:06,930 --> 01:05:10,470
prefer having them above but but
there are scenarios where it is

981
01:05:10,500 --> 01:05:13,830
important whether or not they're
inside or outside. It does it

982
01:05:13,830 --> 01:05:15,630
does it just not scenarios I
ever run into.

983
01:05:16,200 --> 01:05:20,190
It does matter, it does matter.
And yeah, it doesn't matter if

984
01:05:20,190 --> 01:05:23,280
you're if you're, it'll make
your namespaces shorter as a

985
01:05:23,280 --> 01:05:26,100
whole if they're on the inside,
because they will automatically

986
01:05:26,100 --> 01:05:30,600
find the ones that it's in. As
far as your as far as what

987
01:05:30,600 --> 01:05:36,510
you're using go. When Microsoft
first came out with stylecop

988
01:05:37,500 --> 01:05:40,860
using usings, for originally
were told to be on the inside of

989
01:05:40,860 --> 01:05:45,150
your namespace. I like it
because it collapses everything

990
01:05:45,300 --> 01:05:48,510
together. So you'll see that's,
that's my default rule is to put

991
01:05:48,510 --> 01:05:51,240
them in the inside. I had some
guy argue with me and tell me

992
01:05:51,240 --> 01:05:53,850
Well, there just won't work in
there. I'm like, Wow, my code

993
01:05:53,850 --> 01:05:54,510
doesn't know that.

994
01:05:58,980 --> 01:06:01,830
Yeah, I always do it the way
that's the default from all the

995
01:06:01,830 --> 01:06:04,380
templates, which is to put it at
the top. I don't know why

996
01:06:04,440 --> 01:06:06,540
Microsoft has that as the
default for the templates. And

997
01:06:06,540 --> 01:06:09,810
some of their guidance says that
this is a better way to do it.

998
01:06:09,810 --> 01:06:10,710
And sometimes, but

999
01:06:11,610 --> 01:06:14,610
I changed the default templates
I actually never I never like

1000
01:06:14,610 --> 01:06:22,080
create a template. Mads Mads
Christensen has a has a

1001
01:06:22,860 --> 01:06:27,630
component that I think is great.
You just hit Ctrl f2 to create a

1002
01:06:27,630 --> 01:06:30,930
new file, and it'll pull out
templates itself. Okay, if you

1003
01:06:30,930 --> 01:06:34,140
just type in a.cs, it'll create
the file, it's faster than doing

1004
01:06:34,170 --> 01:06:38,250
add new, whatever. And, and he
has pulls in his own templates

1005
01:06:38,250 --> 01:06:41,520
from us directory so that it's
easier to modify them as well.

1006
01:06:41,790 --> 01:06:45,180
Okay, try to change the internal
templates on Visual Studio, I've

1007
01:06:45,180 --> 01:06:47,310
got a blog post on it someplace.
I think that's where the guy is

1008
01:06:47,310 --> 01:06:50,100
arguing with me about the USING
clause. Because that's what I

1009
01:06:50,100 --> 01:06:52,770
was trying to do. I was trying
to change some of the things. I

1010
01:06:52,770 --> 01:06:56,250
also like my item templates.
Well, we got to get this

1011
01:06:56,250 --> 01:06:58,710
dependency injection thing, the
same pattern happens over and

1012
01:06:58,710 --> 01:07:01,770
over again, why can I just say,
inject this, automatically

1013
01:07:01,770 --> 01:07:05,760
create it in the end? Like right
there, you see that you're a

1014
01:07:05,760 --> 01:07:08,220
helper, right? So what am I
going to have? I'm gonna have

1015
01:07:08,220 --> 01:07:10,410
three things gonna have a
parameter there, I'm gonna have

1016
01:07:10,410 --> 01:07:12,990
it in the constructor, and I'm
gonna have a variable. So

1017
01:07:13,019 --> 01:07:14,879
TypeScript lets you do this all
in one line.

1018
01:07:16,410 --> 01:07:21,450
Yeah, yeah. Yeah. Yeah. Another
mandirs languages, right. But we

1019
01:07:21,450 --> 01:07:23,460
should be able to, we should be
able to pull this, I think

1020
01:07:23,460 --> 01:07:27,750
there's a refactoring now, that
can do it. But when it creates

1021
01:07:27,750 --> 01:07:33,060
that line, 22 there, it'll make
it a public member. But I don't,

1022
01:07:33,180 --> 01:07:36,270
if I injected it, there's no
reason for it to ever be public.

1023
01:07:36,540 --> 01:07:36,990
Right?

1024
01:07:37,379 --> 01:07:40,949
Yeah. Sometimes you want public
properties that are injected? I

1025
01:07:40,949 --> 01:07:43,559
mean, a lot of times you don't
but but you could, if you're

1026
01:07:43,559 --> 01:07:45,629
making it a property, there's no
reason why it shouldn't be

1027
01:07:45,629 --> 01:07:48,029
public, right? If you want it to
be private, why don't you just

1028
01:07:48,029 --> 01:07:48,599
make it a field?

1029
01:07:49,920 --> 01:07:53,070
Because I can answer that
question too, because I'm a big

1030
01:07:53,070 --> 01:07:56,970
fan of runtime type information,
and fields don't have any. So as

1031
01:07:56,970 --> 01:07:59,580
a default, and the cost between
the field and the property is

1032
01:07:59,580 --> 01:08:02,700
trivial. So I always go with
properties. I just get rid of

1033
01:08:02,700 --> 01:08:05,820
all the fields in the world.
Mostly, it's a backing field. So

1034
01:08:05,820 --> 01:08:07,440
anytime I ever have a field,
otherwise, I'm gonna have a

1035
01:08:07,440 --> 01:08:08,130
properties.

1036
01:08:09,330 --> 01:08:11,940
what's what's your runtime type
information that you're using?

1037
01:08:12,060 --> 01:08:13,770
Like, what do you need that for?

1038
01:08:14,190 --> 01:08:17,190
In this particular case? I'm
not. But you'll see, like,

1039
01:08:17,220 --> 01:08:20,490
you'll see plenty of times that
actually I actually do use maybe

1040
01:08:20,490 --> 01:08:24,450
not in this code, but I actually
use runtime type information. So

1041
01:08:24,480 --> 01:08:26,910
whatever the properties on this
particular object activity,

1042
01:08:27,150 --> 01:08:31,440
activator, create instance, and
stuff like that, which, yeah, so

1043
01:08:32,400 --> 01:08:34,020
iterate through properties.

1044
01:08:35,820 --> 01:08:39,060
But again, that's that's like
exposing the internals, right?

1045
01:08:39,060 --> 01:08:42,120
If you want this to actually be
private, then making it a field

1046
01:08:42,120 --> 01:08:45,240
makes it more private. Like it's
a bust to me that it doesn't

1047
01:08:45,240 --> 01:08:49,350
show up in reflection, if I
don't want it to be exposed.

1048
01:08:50,940 --> 01:08:55,650
Well, I guess, but I don't
expect my end users to be using

1049
01:08:55,650 --> 01:09:00,030
reflection anyway. Right? But I
do I do use well, like JSON

1050
01:09:00,030 --> 01:09:04,920
dotnet and the way it It won't
serialize it won't serialize

1051
01:09:04,920 --> 01:09:07,650
something, if it's a private
field, right?

1052
01:09:08,700 --> 01:09:11,100
Okay, but you never want Jason
to serialize this because it's a

1053
01:09:11,100 --> 01:09:11,610
service.

1054
01:09:13,140 --> 01:09:16,140
on that case, true, but I'm just
saying my default is as I go

1055
01:09:16,140 --> 01:09:20,100
with, the only difference
between private field and the

1056
01:09:20,370 --> 01:09:22,740
private property is runtime type
information.

1057
01:09:24,030 --> 01:09:28,950
Okay, I'm not saying you're
always wrong. The reason why I

1058
01:09:29,370 --> 01:09:33,000
go in would use a field
typically, is because to me, if

1059
01:09:33,000 --> 01:09:36,780
it's a property, that that
implies that a client is going

1060
01:09:36,780 --> 01:09:39,540
to work with it, like some other
thing is going to work with it.

1061
01:09:40,530 --> 01:09:43,230
That's not always true. But it
would be super rare for me to

1062
01:09:43,230 --> 01:09:45,900
have a private property like
this. I might have a private

1063
01:09:45,900 --> 01:09:49,470
setter. I might even have like
an internal get or something but

1064
01:09:49,650 --> 01:09:53,340
but if it's a property, to me,
the the intent of that contract

1065
01:09:53,340 --> 01:09:56,070
is that some other class besides
mine is going to work with it.

1066
01:09:56,370 --> 01:09:58,470
And if the only thing that's
ever going to work with it is my

1067
01:09:58,470 --> 01:10:02,610
class then I will make that a
field. Because communicates to

1068
01:10:02,610 --> 01:10:05,040
me that my design intent is that
it's only for me.

1069
01:10:06,600 --> 01:10:11,190
To me fields are worthless. Just
make a frame of properties. Why

1070
01:10:11,190 --> 01:10:11,940
do I need to feel

1071
01:10:12,600 --> 01:10:18,300
like, properties are different
things is new to me. So we're

1072
01:10:18,300 --> 01:10:18,840
just,

1073
01:10:18,990 --> 01:10:22,290
this is actually a relatively
recent feature in C sharp It was

1074
01:10:22,290 --> 01:10:25,230
like, I don't know, probably C
sharp for maybe that where we

1075
01:10:25,230 --> 01:10:28,740
even got these auto properties,
like in the first version of C

1076
01:10:28,740 --> 01:10:31,560
sharp, you couldn't do this, the
only thing you could do is

1077
01:10:31,560 --> 01:10:35,340
create a backing field and then
have a getter accessor wrapped

1078
01:10:35,340 --> 01:10:39,420
around it. So So part of my
preferences, probably just

1079
01:10:39,420 --> 01:10:42,210
because I've been working with C
sharp for 20 years or close to

1080
01:10:42,210 --> 01:10:49,020
it. What is it been like 17
years now. And before that

1081
01:10:49,020 --> 01:10:51,660
things before before this one
was called

1082
01:10:51,660 --> 01:10:58,770
Delphi, which is what C sharp
is, by the way. Anders Anders

1083
01:10:58,770 --> 01:11:01,650
Hiles Berg created C sharp,
Phil, he also created

1084
01:11:01,710 --> 01:11:06,000
TypeScript. And he also created
Delphi and object Pascal. So

1085
01:11:06,000 --> 01:11:11,130
when he he left, he left Borland
after creating Delphi and went

1086
01:11:11,130 --> 01:11:15,060
to Microsoft and created C
sharp. So we Delphi people joked

1087
01:11:15,060 --> 01:11:20,190
that, Oh, this is what Delphi
five was supposed to be. So most

1088
01:11:20,190 --> 01:11:23,370
of the Delphi people have left
and followed Anders over. But it

1089
01:11:23,370 --> 01:11:26,850
was rather rather easy for us to
pick up C sharp because

1090
01:11:26,880 --> 01:11:29,430
literally you just change
beginning to squigglies. And

1091
01:11:30,480 --> 01:11:34,890
you're there it is, it is Delphi
except for except for the fact

1092
01:11:34,890 --> 01:11:37,050
that Delphi still has one
feature, the C sharp doesn't

1093
01:11:37,050 --> 01:11:43,410
have. You can implement
delegates with an object and

1094
01:11:43,500 --> 01:11:47,040
then dealt in Delphi, you can't
do that in C sharp. You know,

1095
01:11:47,040 --> 01:11:49,770
I'm saying you have an
interface. So if you want to

1096
01:11:49,770 --> 01:11:51,930
implement an interface, and you
have a particular object, you

1097
01:11:51,930 --> 01:11:54,000
want to be the one to implement
that interface in Delphi, you

1098
01:11:54,000 --> 01:11:56,430
can just say, implement the
interface using this this

1099
01:11:56,940 --> 01:12:01,950
component, which is quite nice.
Can't do that. But Has anybody

1100
01:12:01,950 --> 01:12:06,960
seen the new default interface?
What are your thoughts on that?

1101
01:12:07,350 --> 01:12:09,210
default interface
implementations?

1102
01:12:09,690 --> 01:12:12,480
Yes. Will people abuse that and
turn that into multiple

1103
01:12:12,480 --> 01:12:15,810
inheritance or not? I mean, it's
just reeks to say, Sure, why

1104
01:12:15,810 --> 01:12:16,170
not?

1105
01:12:17,400 --> 01:12:20,160
Last week, I think, didn't we,
and we looked into it. And it's

1106
01:12:20,160 --> 01:12:22,830
not bad. Because if there is a
conflict, you have to fix it at

1107
01:12:22,830 --> 01:12:25,590
compile time. So you have to
say, specifically, which

1108
01:12:25,590 --> 01:12:30,960
interface you're going to use,
right? If to both have like a

1109
01:12:30,960 --> 01:12:32,610
save method, or whatever. It's
like,

1110
01:12:33,780 --> 01:12:36,150
what's the difference between
that and multiple inheritance?

1111
01:12:36,150 --> 01:12:38,670
Let's say I have three, three
interfaces that I'll have a

1112
01:12:38,670 --> 01:12:42,000
default thing. Now I could just
say this object is this an

1113
01:12:42,000 --> 01:12:44,490
interface implements these three
interfaces, and it's just like

1114
01:12:44,490 --> 01:12:44,880
being

1115
01:12:45,240 --> 01:12:48,150
I know, there's there's not much
difference, and maybe in a

1116
01:12:48,150 --> 01:12:50,700
future C sharp version, they'll
even support actual multiple

1117
01:12:50,700 --> 01:12:53,550
inheritance and decided that
they're okay with the diamond

1118
01:12:53,550 --> 01:12:54,960
inheritance problem.

1119
01:12:57,570 --> 01:13:02,490
Yeah. So I mean, it's, I
definitely think it's worth

1120
01:13:03,720 --> 01:13:07,290
worth implementing some things
in your default implementations,

1121
01:13:07,500 --> 01:13:11,400
although the intention is is to
be able to not break to not

1122
01:13:11,400 --> 01:13:13,980
break things by changing your
interface that was there. That

1123
01:13:13,980 --> 01:13:20,040
was our design goal, but but it
affords us many other maybe bad

1124
01:13:20,640 --> 01:13:29,970
habits. But Has anybody else
started using? reference? No

1125
01:13:29,970 --> 01:13:32,280
reference? In C sharp?

1126
01:13:32,370 --> 01:13:33,120
I have not yet.

1127
01:13:34,830 --> 01:13:38,070
So you saw my comment the other
day that the default, the

1128
01:13:38,070 --> 01:13:44,400
default type, the default value
for a string? Which can, which

1129
01:13:44,400 --> 01:13:48,720
can't be no, is no. Right?

1130
01:13:48,840 --> 01:13:52,260
Yes, yes. Well, I mean, but also
it'd be empty string, maybe. But

1131
01:13:52,260 --> 01:13:53,490
that breaks all kinds of things.

1132
01:13:54,210 --> 01:13:57,990
Well, if I were to design the
language with the no reference

1133
01:13:58,020 --> 01:14:00,660
pointers in the first place,
that my guess is it would have

1134
01:14:00,660 --> 01:14:03,120
been interesting for a string,
right? And then the nullable

1135
01:14:03,120 --> 01:14:07,950
type would have been no. Right?
would have made sense. So now

1136
01:14:07,950 --> 01:14:10,530
every time you use a string,
that can't be no, you have to

1137
01:14:10,530 --> 01:14:14,880
make sure you end up with a
bunch of properties that say,

1138
01:14:15,510 --> 01:14:20,730
string dot empty after this. But
I think it's gonna be great. You

1139
01:14:20,730 --> 01:14:24,390
know, we're talking about there.
Guys, who in the group, by the

1140
01:14:24,390 --> 01:14:26,640
way, I'm just talking this
conversation with C sharp stuff

1141
01:14:26,760 --> 01:14:28,740
that maybe everybody's all
JavaScript people. I don't know.

1142
01:14:29,970 --> 01:14:33,480
So who's Phil? I know you're a
TypeScript guy, which I think I

1143
01:14:33,480 --> 01:14:38,940
do. I've got some experience
there. Dennis is a C sharp guy.

1144
01:14:40,140 --> 01:14:45,120
Right? I'm, I have experienced
with this C sharp last 10 years,

1145
01:14:45,120 --> 01:14:48,030
but last two years. I'm working
with the Ruby.

1146
01:14:49,470 --> 01:14:52,650
Ruby on Rails. Yeah, Ruby is
supposed to be nice. I haven't

1147
01:14:52,650 --> 01:14:52,950
done it.

1148
01:14:53,850 --> 01:14:59,850
And Ruby is my day job and then
my hope is C sharp.

1149
01:15:00,840 --> 01:15:05,490
Okay, here you're doing C sharp
left, two and a half years.

1150
01:15:06,390 --> 01:15:11,790
Yeah, yeah. Yeah. Okay. So the
reference that the null

1151
01:15:11,790 --> 01:15:14,700
reference normal reference
types, right? Yeah. nullable

1152
01:15:14,700 --> 01:15:18,720
reference types. So a reference
is a pointer to an object. That

1153
01:15:18,720 --> 01:15:21,630
before obviously, it could be,
it could be no. But now you can

1154
01:15:21,630 --> 01:15:25,380
explicitly tell it whether you
want this thing to be no or not.

1155
01:15:25,380 --> 01:15:28,830
So the inevitable error that you
get no reference, you try to

1156
01:15:28,830 --> 01:15:32,100
access a null reference pointer.
Now the compiler will be able to

1157
01:15:32,400 --> 01:15:38,130
check for that. You can turn it
on and off in. I haven't done

1158
01:15:38,130 --> 01:15:41,910
this yet. But you can turn it on
and off in specific areas to two

1159
01:15:41,910 --> 01:15:47,640
different levels. There's
enabled and then there's this

1160
01:15:47,670 --> 01:15:50,490
like a symbol or something,
isn't it? Steve? What's the

1161
01:15:50,490 --> 01:15:53,850
other one called, it's enabled,
and there's another level of it,

1162
01:15:53,850 --> 01:15:57,720
and then there's disabled. By
default, it's disabled, because

1163
01:15:57,720 --> 01:16:05,820
all of your existing code will
not compile. But I think it's

1164
01:16:05,820 --> 01:16:11,970
going to be good. And worth
worth refactoring. So so my

1165
01:16:11,970 --> 01:16:12,480
thoughts are

1166
01:16:12,510 --> 01:16:14,130
trying to find a syntax for it
here.

1167
01:16:16,740 --> 01:16:17,670
Just question mark.

1168
01:16:20,790 --> 01:16:22,650
Question mark for nullable.

1169
01:16:23,370 --> 01:16:25,710
Yeah, yeah, if it's knowable,
you put the question mark, like

1170
01:16:25,740 --> 01:16:28,920
just like, like Phil doesn't
TypeScript.

1171
01:16:29,700 --> 01:16:37,170
If I understand correctly, then
the variable still can be now

1172
01:16:37,410 --> 01:16:43,080
but you cannot use it. Because
when you try to use non nullable

1173
01:16:43,590 --> 01:16:50,040
variable compiler will tell you
about correct. So that's, I

1174
01:16:50,040 --> 01:16:54,330
think, like having a default
value or null for the string, it

1175
01:16:54,330 --> 01:16:57,900
should be okay. Because you
still you will not be able to

1176
01:16:57,900 --> 01:16:58,410
use it.

1177
01:16:59,250 --> 01:17:03,060
yourself. It should still throw
a error if you haven't

1178
01:17:03,090 --> 01:17:03,900
initialized it.

1179
01:17:04,589 --> 01:17:06,419
Yes, yes. Yeah.

1180
01:17:09,450 --> 01:17:13,020
Correct. Interesting that you
can use these directives to turn

1181
01:17:13,020 --> 01:17:13,860
it on and off.

1182
01:17:14,490 --> 01:17:17,430
Yeah, there's another directive
it's enable what's the other one

1183
01:17:17,430 --> 01:17:18,030
I forget

1184
01:17:19,110 --> 01:17:21,000
enable restore and

1185
01:17:21,660 --> 01:17:34,440
that's like another level Yes.
You've heard of it and ever use

1186
01:17:34,440 --> 01:17:41,400
it so it takes some it's nice
because it tells you

1187
01:17:42,030 --> 01:17:43,080
so for example,

1188
01:17:43,230 --> 01:17:47,550
disables the other one other
store disable disable

1189
01:17:48,240 --> 01:17:52,860
but there's a different level
besides just enabled something

1190
01:17:52,860 --> 01:17:54,960
that does like a little
different type of check. So it's

1191
01:17:54,960 --> 01:18:01,890
like not quite as strict. Okay.
You just like you say, so I

1192
01:18:01,890 --> 01:18:06,540
can't see it on there. But maybe
I maybe I was dreaming and I

1193
01:18:06,540 --> 01:18:12,720
made that up. But don't don't
think I did. But think about it

1194
01:18:12,720 --> 01:18:17,850
for a while like Steve has a
guard clauses because how often

1195
01:18:17,850 --> 01:18:20,370
you actually check for these
things, right? Because that's

1196
01:18:20,670 --> 01:18:24,000
extremely common thing. Every
reference point or you send into

1197
01:18:24,000 --> 01:18:26,610
a method you put a guard clause
on right Steve if it's required

1198
01:18:26,610 --> 01:18:30,180
I need to guard clause to check
for know if you have this

1199
01:18:30,180 --> 01:18:32,940
enabled, you don't need the
guard clause anymore because you

1200
01:18:32,940 --> 01:18:34,170
can't get it No.

1201
01:18:38,550 --> 01:18:45,480
All forgiving operators the bang
nullability can be oblivious.

1202
01:18:48,330 --> 01:18:50,520
Before this feature existed
variables were oblivious to

1203
01:18:50,520 --> 01:18:54,930
whether or not they were no.
Yeah, safe only is what you're

1204
01:18:54,930 --> 01:18:55,350
after.

1205
01:18:55,920 --> 01:18:58,260
Yeah, yeah, yeah, that's it.
Yeah, I was gonna say there's

1206
01:18:58,260 --> 01:19:01,590
some other stinking thing in
there that you can do. Yeah.

1207
01:19:01,620 --> 01:19:02,250
nullable. And

1208
01:19:03,330 --> 01:19:06,120
safe. Only warning. All kinds of
settings for this.

1209
01:19:07,290 --> 01:19:14,430
Yeah. Okay. So there's more than
just three. Yeah, but anyway, I

1210
01:19:14,430 --> 01:19:18,390
think this is a great spot for
people are moving to C sharp to

1211
01:19:18,390 --> 01:19:25,740
turn on up for grabs on their
site. And then let people enable

1212
01:19:25,740 --> 01:19:27,690
it enable. It works. Yeah.

1213
01:19:27,900 --> 01:19:32,130
Yeah. Yeah. Yeah. And then you
can like say you can Clean up,

1214
01:19:32,790 --> 01:19:34,080
clean up some guard clauses.

1215
01:19:34,290 --> 01:19:37,110
Now the default enablement of
this is done in the XML and your

1216
01:19:37,110 --> 01:19:41,460
cs proj. Right. That's your
default setting is project wide

1217
01:19:41,460 --> 01:19:46,560
with the latest version here and
double context option here. So

1218
01:19:46,650 --> 01:19:48,690
right, that would be the first
thing they would check. They

1219
01:19:48,690 --> 01:19:51,870
can't just go in and turn on
like one class in your project.

1220
01:19:53,610 --> 01:19:57,030
I mean, they could turn this on
to something that's not fully

1221
01:19:57,030 --> 01:19:58,560
enabled, right and do

1222
01:19:59,280 --> 01:20:01,590
Yeah, but you Get it down to the
point where you turn it on in

1223
01:20:01,590 --> 01:20:02,430
one class,

1224
01:20:02,760 --> 01:20:04,110
you do warnings only.

1225
01:20:05,400 --> 01:20:08,730
Yeah. So most people are going
to do warnings, right? And then

1226
01:20:08,730 --> 01:20:14,220
go back through and, and clean
them up, right. But something to

1227
01:20:14,220 --> 01:20:19,050
think about on Greenfield apps,
I would say turn it on enable on

1228
01:20:19,050 --> 01:20:21,030
a Greenfield app and use it.
Sure.

1229
01:20:22,800 --> 01:20:28,290
We have with our team here is
have a convention for this kind

1230
01:20:28,290 --> 01:20:34,350
of stuff. So we never add the
gods for now for constructor

1231
01:20:34,710 --> 01:20:38,550
arguments. But we have a
convention like we never pass

1232
01:20:38,550 --> 01:20:43,560
now or something. So if you pass
now it's sweet. It will blow up

1233
01:20:43,560 --> 01:20:44,190
anyway.

1234
01:20:45,480 --> 01:20:48,480
So PC or something for that, how
are you enforcing that?

1235
01:20:49,469 --> 01:20:52,739
We're not enforcing this
convention between convention

1236
01:20:54,329 --> 01:20:56,879
between the team members,

1237
01:20:57,210 --> 01:20:59,310
okay, so So turn it on, it'll
blow

1238
01:20:59,310 --> 01:21:03,750
up. It'll blow up is because the
code that's getting the thing

1239
01:21:03,750 --> 01:21:05,670
will try and use it and then
it'll get an all reference

1240
01:21:05,670 --> 01:21:07,800
exception. Yes. Okay.

1241
01:21:09,930 --> 01:21:14,610
I don't I don't remember when I
lost when we got in production.

1242
01:21:15,600 --> 01:21:20,400
Knowledge reference exceptions.
So everything key injected

1243
01:21:20,400 --> 01:21:27,390
through. Di Di so nice, which is
good.

1244
01:21:28,680 --> 01:21:31,170
All right. Well, we are we are
past time. So I'm going to wrap

1245
01:21:31,170 --> 01:21:35,130
this up and get this recording
up there. Sorry, this this week

1246
01:21:35,130 --> 01:21:37,110
was a little bit all over the
place. We didn't have a lot of

1247
01:21:37,110 --> 01:21:40,140
questions, but we had a good
discussion. I think if you guys

1248
01:21:40,140 --> 01:21:42,510
have any follow up questions or
or think of anything during the

1249
01:21:42,510 --> 01:21:45,990
week, please post them in slack
and I'll talk to you next week.

1250
01:21:47,130 --> 01:21:49,230
Alright, thanks, guys. I'll
throw the answers to the fluid

1251
01:21:49,230 --> 01:21:51,300
validation on there or a blog
post.

1252
01:21:51,990 --> 01:21:55,170
Care guys Thanks, guys.

